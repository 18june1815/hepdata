%!PS-Adobe-3.0 EPSF-3.0
%%Title: (/direct/phenix+data07/missah/analysis/study/plotsfinal/v2qvsKETq_good.eps: canv)
%%Version: 1 4
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 06:18:34 05/23/06
%%DocumentData: Clean7Bit
%%LanguageLevel: 3
%%BoundingBox: 1 22 556 415
%%HiResBoundingBox: 0.543472 22.328827 555.974792 415.261108
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L3 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb Printer/PostScript Color Management 0
%%BeginResource: procset l3check 6.0 1
%%Copyright: Copyright 1998,2001-2002 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 3 lt }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show ==
72 580 moveto (for printing to a PostScript Language Level )dup show ==
systemdict /languagelevel known {(2)}{(1)}ifelse dup show ==
( printer.) dup show ==
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level )show
systemdict /languagelevel known {(2)}{(1)}ifelse show
(\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict /ct_CffDict 6 dict put     
ct_CffDict begin                    
/F0Subr     
{
    systemdict /internaldict known 
   {
      1183615869 systemdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } 
   {
      userdict /internaldict known not 
        { 
          userdict /internaldict 
          {
               count 0 eq 
             {/internaldict errordict /invalidaccess get exec} if 
             dup type /integertype ne 
             {/internaldict errordict /invalidaccess get exec} if 
             dup 1183615869 eq
             {pop 0} 
             {/internaldict errordict /invalidaccess get exec} 
             ifelse 
          } 
          dup 14 get 1 25 dict put 
          bind executeonly put 
       } if 
       1183615869 userdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } ifelse
    [ 
       systemdict /internaldict known not 
       { 100 dict /begin cvx /mtx matrix /def cvx } if 
       systemdict /currentpacking known {currentpacking true setpacking} if 
       { 
          systemdict /internaldict known { 
          1183615869 systemdict /internaldict get exec 
          dup /$FlxDict known not { 
          dup dup length exch maxlength eq 
          { pop userdict dup /$FlxDict known not
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } if } 
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } 
          ifelse 
          } if /$FlxDict get begin } if 
          grestore 
          /exdef {exch def} def 
          /dmin exch abs 100 div def 
          /epX exdef /epY exdef 
          /c4y2 exdef /c4x2 exdef /c4y1 exdef /c4x1 exdef /c4y0 exdef /c4x0 exdef 
          /c3y2 exdef /c3x2 exdef /c3y1 exdef /c3x1 exdef /c3y0 exdef /c3x0 exdef 
          /c1y2 exdef /c1x2 exdef /c2x2 c4x2 def /c2y2 c4y2 def 
          /yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def 
          /PickCoords {  
          {c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2} 
          {c3x0 c3y0 c3x1 c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2} 
          ifelse 
          /y5 exdef /x5 exdef /y4 exdef /x4 exdef /y3 exdef /x3 exdef 
          /y2 exdef /x2 exdef /y1 exdef /x1 exdef /y0 exdef /x0 exdef 
          } def 
          mtx currentmatrix pop  
          mtx 0 get abs .00001 lt mtx 3 get abs .00001 lt or 
          {/flipXY -1 def} 
          {mtx 1 get abs .00001 lt mtx 2 get abs .00001 lt or 
          {/flipXY 1 def} 
          {/flipXY 0 def} 
          ifelse } 
          ifelse 
          /erosion 1 def 
          systemdict /internaldict known { 
           1183615869 systemdict /internaldict get exec dup  
          /erosion known 
          {/erosion get /erosion exch def} 
          {pop} 
          ifelse 
          } if 
          yflag 
          {
              flipXY 0 eq c3y2 c4y2 eq or 
             {false PickCoords}
             {
                  /shrink c3y2 c4y2 eq 
                {0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs} ifelse def 
                /yshrink {c4y2 sub shrink mul c4y2 add} def 
                /c1y0 c3y0 yshrink def /c1y1 c3y1 yshrink def 
                /c2y0 c4y0 yshrink def /c2y1 c4y1 yshrink def 
                /c1x0 c3x0 def /c1x1 c3x1 def /c2x0 c4x0 def /c2x1 c4x1 def 
                /dY 0 c3y2 c1y2 sub round 
                dtransform flipXY 1 eq {exch} if pop abs def 
                dY dmin lt PickCoords 
                y2 c1y2 sub abs 0.001 gt {
                   c1x2 c1y2 transform flipXY 1 eq {exch} if  
                   /cx exch def /cy exch def 
                   /dY 0 y2 c1y2 sub round dtransform flipXY 1 eq {exch} 
                   if pop def 
                   dY round dup 0 ne 
                   {/dY exdef } 
                   {pop dY 0 lt {-1}{1} ifelse /dY exdef} 
                   ifelse 
                   /erode PaintType 2 ne erosion 0.5 ge and def  
                   erode {/cy cy 0.5 sub def} if 
                   /ey cy dY add def   
                   /ey ey ceiling ey sub ey floor add def   
                   erode {/ey ey 0.5 add def} if   
                   ey cx flipXY 1 eq {exch} if itransform exch pop  
                   y2 sub /eShift exch def  
                   /y1 y1 eShift add def /y2 y2 eShift add def /y3 y3  
                   eShift add def  
                } if  
             } ifelse  
          } 
          {
              flipXY 0 eq c3x2 c4x2 eq or  
             {false PickCoords }  
             { /shrink c3x2 c4x2 eq  
                {0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs} ifelse def  
                /xshrink {c4x2 sub shrink mul c4x2 add} def  
                /c1x0 c3x0 xshrink def /c1x1 c3x1 xshrink def  
                /c2x0 c4x0 xshrink def /c2x1 c4x1 xshrink def  
                /c1y0 c3y0 def /c1y1 c3y1 def /c2y0 c4y0 def /c2y1 c4y1 def  
                /dX c3x2 c1x2 sub round 0 dtransform  
                flipXY -1 eq {exch} if pop abs def 
                dX dmin lt PickCoords  
                x2 c1x2 sub abs 0.001 gt {  
                   c1x2 c1y2 transform flipXY -1 eq {exch} if  
                   /cy exch def /cx exch def   
                   /dX x2 c1x2 sub round 0 dtransform flipXY -1 eq {exch} if pop def  
                   dX round dup 0 ne  
                   {/dX exdef}  
                   {pop dX 0 lt {-1}{1} ifelse /dX exdef}  
                   ifelse  
                   /erode PaintType 2 ne erosion .5 ge and def 
                   erode {/cx cx .5 sub def} if  
                   /ex cx dX add def  
                   /ex ex ceiling ex sub ex floor add def  
                   erode {/ex ex .5 add def} if  
                   ex cy flipXY -1 eq {exch} if itransform pop  
                   x2 sub /eShift exch def  
                   /x1 x1 eShift add def /x2 x2 eShift add def /x3 x3 eShift add def  
                } if  
             } ifelse  
          } ifelse 
          x2 x5 eq y2 y5 eq or  
          {x5 y5 lineto }  
          {x0 y0 x1 y1 x2 y2 curveto  
          x3 y3 x4 y4 x5 y5 curveto}  
          ifelse  
          epY epX   
       }  
       systemdict /currentpacking known {exch setpacking} if   
       /exec cvx /end cvx 
    ] cvx  
    executeonly 
    exch  
    {pop true exch restore}   
    {   
       systemdict /internaldict known not  
       {1183615869 userdict /internaldict get exec  
       exch /FlxProc exch put true}  
       {1183615869 systemdict /internaldict get exec  
       dup length exch maxlength eq  
       {false}   
       {1183615869 systemdict /internaldict get exec 
       exch /FlxProc exch put true}  
       ifelse}  
       ifelse
    } ifelse  
    {
       systemdict /internaldict known  
       {1183615869 systemdict /internaldict get exec /FlxProc get exec}  
       {1183615869 userdict /internaldict get exec /FlxProc get exec}  
       ifelse   
    } if  
} executeonly def
/F1Subr
{gsave currentpoint newpath moveto} bind def 
/F2Subr
{currentpoint grestore gsave currentpoint newpath moveto} bind  def
/HSSubr 
{
   systemdict /internaldict known not
   {pop 3}
   {1183615869 systemdict /internaldict get exec
    dup /startlock known
    {/startlock get exec}
    {dup /strtlck known
    {/strtlck get exec}
    {pop 3}
    ifelse}
    ifelse}
    ifelse
} bind def
end                                 
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev3 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 3
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/_processColors
currentpagedevice /ProcessColorModel getifknown
{ << /DeviceGray [/Gray]
/DeviceRGB [/Red /Green /Blue]
/DeviceCMYK [/Cyan /Magenta /Yellow /Black]
/DeviceCMY [/Cyan /Magenta /Yellow]
/DeviceRGBK [/Red /Green /Blue /Black]
>> exch getifknown {} {[]} ifelse }
{[]}
ifelse
def
/initialize {
PDFVars /docSetupDone get
{
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
}if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/rssds
{
/Shading get /DataSource get resetfile
} bd
/sh
{ dup /DataSource known
{ dup begin
DataSource type /filetype eq { DataSource resetfile } if
end
} if
shfill
} [/DataSource] bld
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri {
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/CMYKDeviceNColorspaces [
[/Separation /None /DeviceCMYK {0 0 0}] bind
[/Separation (Black)
/DeviceCMYK {0 0 0 4 -1 roll}] bind
[/Separation (Yellow)
/DeviceCMYK {0 0 3 -1 roll 0}] bind
[/DeviceN [(Yellow) (Black)]
/DeviceCMYK {0 0 4 2 roll}] bind
[/Separation (Magenta)
/DeviceCMYK {0 exch 0 0}] bind
[/DeviceN [(Magenta) (Black)]
/DeviceCMYK {0 3 1 roll 0 exch}] bind
[/DeviceN [(Magenta) (Yellow)]
/DeviceCMYK {0 3 1 roll 0}] bind
[/DeviceN [(Magenta) (Yellow) (Black)]
/DeviceCMYK {0 4 1 roll}] bind
[/Separation (Cyan)
/DeviceCMYK {0 0 0}] bind
[/DeviceN [(Cyan) (Black)]
/DeviceCMYK {0 0 3 -1 roll}] bind
[/DeviceN [(Cyan) (Yellow)]
/DeviceCMYK {0 exch 0}] bind
[/DeviceN [(Cyan) (Yellow) (Black)]
/DeviceCMYK {0 3 1 roll}] bind
[/DeviceN [(Cyan) (Magenta)]
/DeviceCMYK {0 0}] bind
[/DeviceN [(Cyan) (Magenta) (Black)]
/DeviceCMYK {0 exch}] bind
[/DeviceN [(Cyan) (Magenta) (Yellow)]
/DeviceCMYK {0}] bind
[/DeviceCMYK] bind
] def
/nzopmsc {
6 dict begin
/kk exch def
/yy exch def
/mm exch def
/cc exch def
/sum 0 def
cc 0 ne {/sum sum 2#1000 or def cc} if
mm 0 ne {/sum sum 2#0100 or def mm} if
yy 0 ne {/sum sum 2#0010 or def yy} if
kk 0 ne {/sum sum 2#0001 or def kk} if
CMYKDeviceNColorspaces sum get setcolorspace
sum 0 eq {0} if
end
setcolor
} [/cc /mm /yy /kk /sum] bld
/every? {
true
3 2 roll
{ 2 index exec not {pop false exit} if } forall
exch pop
} bd
/knownColorants? {
3 dict begin
/colorants exch def
{
/DeviceN /ColorSpaceFamily findresource pop
/cpd currentpagedevice def
/dc 10 dict def
cpd /SeparationColorNames getifknown
{ { dc exch 0 put } forall } if
_processColors { dc exch 0 put } forall
colorants {dc exch known} every?
} stopped
{ false }
if
end
} [/colorants /dc /cpd] bld
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Times-BoldItalic
[/N11/Times-BoldItalic 1 TZ
%%IncludeResource Helvetica-Bold
[/N12/Helvetica-Bold 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1191 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-14, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:7d2085c0-8ceb-4d9f-9451-398688c0a288' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0.1 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:7d2085c0-8ceb-4d9f-9451-398688c0a288' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreatorTool='ROOT Version 4.01/02' xap:ModifyDate='2006-05-23T06:17:18-04:00' xap:CreateDate='2006-05-23T06:17:18-04:00'></rdf:Description>
<rdf:Description rdf:about='uuid:7d2085c0-8ceb-4d9f-9451-398688c0a288' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:2e16c1e1-52e4-4470-a960-8cf7be291066'/>
<rdf:Description rdf:about='uuid:7d2085c0-8ceb-4d9f-9451-398688c0a288' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>/direct/phenix+data07/missah/analysis/study/plotsfinal/v2qvsKETq_good.eps: canvas</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
1 22 555 393 rectclip
/N13 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

0.543472 22.328827 555.43132 392.932281 re
W
n
0.02 setsmoothness
n
0.059998 0.059998 566.940002 461.940002 re
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E2 exch /ColorSpace defineRes

cs 1.0 1.0 1.0 sc
f
n
283.5 231.0 56.75 46.25 re
0.90196 0.90196 0.90196 sc
f
n
287.5 231.0 m
287.5 228.25 l
343.0 228.25 l
343.0 273.0 l
340.25 273.0 l
340.25 231.0 l
[/DeviceGray] cs 0.0 sc
eofill
0.75 w
n
283.5 231.0 m
340.25 231.0 -56.75 46.25 re
283.5 231.0 m
h
S
/E2 /ColorSpace findRes cs 0.58039 0.41176 0.43922 sc
290.0 253.0 m
/N11 6.442398 Tf
(RHIC Energies)
[4.297128 5.012185 2.506142 4.297128 1.6106 4.297128 3.581972 2.860426 2.506142 3.221199 1.790986 
2.860426 2.506142 ] pdfxs
n
0.059998 0.059998 283.440002 452.690002 re
1.0 1.0 1.0 sc
f
n
59.5 68.0 224.0 339.5 re
f
n
283.5 68.0 -224.0 339.5 re
59.5 68.0 m
h
[/DeviceGray] cs 0.0 sc
S
n
59.5 68.0 224.0 339.5 re
/E2 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
283.5 68.0 -224.0 339.5 re
59.5 68.0 m
h
59.5 68.0 m
283.5 68.0 l
59.5 68.0 m
283.5 68.0 l
[/DeviceGray] cs 0.0 sc
S
150.0 34.0 m
/N12 15.645798 Tf
( \(GeV/c\))
[4.34953 5.209934 12.172429 8.699059 10.435863 4.34953 8.699059 5.209934 ] pdfxs
142.75 28.5 m
/N12 11.044098 Tf
(T) show
133.5 34.0 m
/N12 15.645798 Tf
(p) show
n
64.75 78.75 m
64.75 68.0 l
75.25 73.25 m
75.25 68.0 l
85.5 73.25 m
85.5 68.0 l
96.0 73.25 m
96.0 68.0 l
106.5 73.25 m
106.5 68.0 l
116.75 78.75 m
116.75 68.0 l
127.25 73.25 m
127.25 68.0 l
137.75 73.25 m
137.75 68.0 l
148.0 73.25 m
148.0 68.0 l
158.5 73.25 m
158.5 68.0 l
169.0 78.75 m
169.0 68.0 l
179.25 73.25 m
179.25 68.0 l
189.75 73.25 m
189.75 68.0 l
200.25 73.25 m
200.25 68.0 l
210.5 73.25 m
210.5 68.0 l
221.0 78.75 m
221.0 68.0 l
231.5 73.25 m
231.5 68.0 l
241.75 73.25 m
241.75 68.0 l
252.25 73.25 m
252.25 68.0 l
262.75 73.25 m
262.75 68.0 l
273.0 78.75 m
273.0 68.0 l
64.75 78.75 m
64.75 68.0 l
273.0 78.75 m
273.0 68.0 l
S
59.75 51.5 m
/N12 16.566101 Tf
(01234)
[52.499626 51.50069 52.499626 51.50069 52.499626 ] pdfxs
n
59.5 407.5 m
283.5 407.5 l
64.75 396.75 m
64.75 407.5 l
75.25 402.25 m
75.25 407.5 l
85.5 402.25 m
85.5 407.5 l
96.0 402.25 m
96.0 407.5 l
106.5 402.25 m
106.5 407.5 l
116.75 396.75 m
116.75 407.5 l
127.25 402.25 m
127.25 407.5 l
137.75 402.25 m
137.75 407.5 l
148.0 402.25 m
148.0 407.5 l
158.5 402.25 m
158.5 407.5 l
169.0 396.75 m
169.0 407.5 l
179.25 402.25 m
179.25 407.5 l
189.75 402.25 m
189.75 407.5 l
200.25 402.25 m
200.25 407.5 l
210.5 402.25 m
210.5 407.5 l
221.0 396.75 m
221.0 407.5 l
231.5 402.25 m
231.5 407.5 l
241.75 402.25 m
241.75 407.5 l
252.25 402.25 m
252.25 407.5 l
262.75 402.25 m
262.75 407.5 l
273.0 396.75 m
273.0 407.5 l
64.75 396.75 m
64.75 407.5 l
273.0 396.75 m
273.0 407.5 l
59.5 68.0 m
59.5 407.5 l
S
23.0 241.25 m
/N12 [0.0 13.805099 -13.805099 0.0 0.0 0.0] Tf
(2) show
17.5 229.25 m
/N12 [0.0 21.167801 -21.167801 0.0 0.0 0.0] Tf
(v) show
n
66.0 68.0 m
59.5 68.0 l
62.75 88.5 m
59.5 88.5 l
62.75 109.0 m
59.5 109.0 l
62.75 129.75 m
59.5 129.75 l
62.75 150.25 m
59.5 150.25 l
66.0 170.75 m
59.5 170.75 l
62.75 191.5 m
59.5 191.5 l
62.75 212.0 m
59.5 212.0 l
62.75 232.5 m
59.5 232.5 l
62.75 253.25 m
59.5 253.25 l
66.0 273.75 m
59.5 273.75 l
62.75 294.25 m
59.5 294.25 l
62.75 315.0 m
59.5 315.0 l
62.75 335.5 m
59.5 335.5 l
62.75 356.0 m
59.5 356.0 l
66.0 376.5 m
59.5 376.5 l
66.0 376.5 m
59.5 376.5 l
62.75 397.25 m
59.5 397.25 l
S
47.0 63.5 m
/N12 16.566101 Tf
(0) show
34.999527 166.49971 m
(0.1)
[9.210748 4.605374 9.210748 ] pdfxs
33.250137 269.749573 m
(0.2)
[9.210748 4.605374 9.210748 ] pdfxs
33.250137 372.749298 m
(0.3)
[9.210748 4.605374 9.210748 ] pdfxs
n
283.5 68.0 m
283.5 407.5 l
277.0 68.0 m
283.5 68.0 l
280.25 88.5 m
283.5 88.5 l
280.25 109.0 m
283.5 109.0 l
280.25 129.75 m
283.5 129.75 l
280.25 150.25 m
283.5 150.25 l
277.0 170.75 m
283.5 170.75 l
280.25 191.5 m
283.5 191.5 l
280.25 212.0 m
283.5 212.0 l
280.25 232.5 m
283.5 232.5 l
280.25 253.25 m
283.5 253.25 l
277.0 273.75 m
283.5 273.75 l
280.25 294.25 m
283.5 294.25 l
280.25 315.0 m
283.5 315.0 l
280.25 335.5 m
283.5 335.5 l
280.25 356.0 m
283.5 356.0 l
277.0 376.5 m
283.5 376.5 l
277.0 376.5 m
283.5 376.5 l
280.25 397.25 m
283.5 397.25 l
S
n
231.0 217.5 m
231.0 219.75 l
231.0 210.0 m
231.0 208.0 l
/E2 /ColorSpace findRes cs 1.0 0.0 0.0 sc
S
n
234.875015 213.779999 m
234.875015 215.919006 233.139008 217.655014 231.0 217.655014 c
228.861008 217.655014 227.125015 215.919006 227.125015 213.779999 c
227.125015 211.641006 228.861008 209.905014 231.0 209.905014 c
233.139008 209.905014 234.875015 211.641006 234.875015 213.779999 c
eofill
n
208.355011 226.259995 m
208.355011 228.399017 206.619003 230.13501 204.479996 230.13501 c
202.341003 230.13501 200.605011 228.399017 200.605011 226.259995 c
200.605011 224.121017 202.341003 222.38501 204.479996 222.38501 c
206.619003 222.38501 208.355011 224.121017 208.355011 226.259995 c
eofill
n
182.615005 223.979996 m
182.615005 226.119003 180.879013 227.855011 178.73999 227.855011 c
176.601013 227.855011 174.865005 226.119003 174.865005 223.979996 c
174.865005 221.841003 176.601013 220.105011 178.73999 220.105011 c
180.879013 220.105011 182.615005 221.841003 182.615005 223.979996 c
eofill
n
167.13501 218.220001 m
167.13501 220.359009 165.399002 222.095016 163.259995 222.095016 c
161.121002 222.095016 159.38501 220.359009 159.38501 218.220001 c
159.38501 216.081009 161.121002 214.345016 163.259995 214.345016 c
165.399002 214.345016 167.13501 216.081009 167.13501 218.220001 c
eofill
n
156.63501 210.479996 m
156.63501 212.619003 154.899002 214.355011 152.759995 214.355011 c
150.621002 214.355011 148.88501 212.619003 148.88501 210.479996 c
148.88501 208.341003 150.621002 206.605011 152.759995 206.605011 c
154.899002 206.605011 156.63501 208.341003 156.63501 210.479996 c
eofill
n
145.895004 201.23999 m
145.895004 203.379013 144.159012 205.115005 142.020004 205.115005 c
139.881012 205.115005 138.145004 203.379013 138.145004 201.23999 c
138.145004 199.101013 139.881012 197.365005 142.020004 197.365005 c
144.159012 197.365005 145.895004 199.101013 145.895004 201.23999 c
eofill
n
135.395004 190.019989 m
135.395004 192.159012 133.659012 193.895004 131.520004 193.895004 c
129.381012 193.895004 127.645004 192.159012 127.645004 190.019989 c
127.645004 187.881012 129.381012 186.145004 131.520004 186.145004 c
133.659012 186.145004 135.395004 187.881012 135.395004 190.019989 c
eofill
n
125.135002 176.519989 m
125.135002 178.659012 123.399002 180.395004 121.259995 180.395004 c
119.121002 180.395004 117.385002 178.659012 117.385002 176.519989 c
117.385002 174.381012 119.121002 172.645004 121.259995 172.645004 c
123.399002 172.645004 125.135002 174.381012 125.135002 176.519989 c
eofill
n
117.875008 164.759995 m
117.875008 166.899002 116.139008 168.63501 114.0 168.63501 c
111.861008 168.63501 110.125008 166.899002 110.125008 164.759995 c
110.125008 162.621002 111.861008 160.88501 114.0 160.88501 c
116.139008 160.88501 117.875008 162.621002 117.875008 164.759995 c
eofill
n
112.655006 155.519989 m
112.655006 157.659012 110.919006 159.395004 108.779999 159.395004 c
106.641006 159.395004 104.905006 157.659012 104.905006 155.519989 c
104.905006 153.381012 106.641006 151.645004 108.779999 151.645004 c
110.919006 151.645004 112.655006 153.381012 112.655006 155.519989 c
eofill
n
107.615005 146.220001 m
107.615005 148.359009 105.879005 150.095001 103.739998 150.095001 c
101.601006 150.095001 99.865005 148.359009 99.865005 146.220001 c
99.865005 144.081009 101.601006 142.345001 103.739998 142.345001 c
105.879005 142.345001 107.615005 144.081009 107.615005 146.220001 c
eofill
n
102.395004 135.779999 m
102.395004 137.919006 100.659004 139.655014 98.519997 139.655014 c
96.381004 139.655014 94.645004 137.919006 94.645004 135.779999 c
94.645004 133.641006 96.381004 131.904999 98.519997 131.904999 c
100.659004 131.904999 102.395004 133.641006 102.395004 135.779999 c
eofill
n
97.115005 125.519997 m
97.115005 127.659004 95.379005 129.395004 93.239998 129.395004 c
91.101006 129.395004 89.365005 127.659004 89.365005 125.519997 c
89.365005 123.381004 91.101006 121.645004 93.239998 121.645004 c
95.379005 121.645004 97.115005 123.381004 97.115005 125.519997 c
eofill
n
91.895004 113.759995 m
91.895004 115.899002 90.159004 117.635002 88.019997 117.635002 c
85.881004 117.635002 84.145004 115.899002 84.145004 113.759995 c
84.145004 111.621002 85.881004 109.885002 88.019997 109.885002 c
90.159004 109.885002 91.895004 111.621002 91.895004 113.759995 c
eofill
n
86.855003 102.239998 m
86.855003 104.379005 85.119003 106.115005 82.979996 106.115005 c
80.841003 106.115005 79.105003 104.379005 79.105003 102.239998 c
79.105003 100.101006 80.841003 98.365005 82.979996 98.365005 c
85.119003 98.365005 86.855003 100.101006 86.855003 102.239998 c
eofill
n
81.635002 91.5 m
81.635002 93.639008 79.899002 95.375008 77.759995 95.375008 c
75.621002 95.375008 73.885002 93.639008 73.885002 91.5 c
73.885002 89.361008 75.621002 87.625008 77.759995 87.625008 c
79.899002 87.625008 81.635002 89.361008 81.635002 91.5 c
eofill
n
204.75 226.5 m
204.75 219.25 m
231.0 228.5 m
231.0 232.5 l
231.0 221.0 m
231.0 217.0 l
0.0 0.0 1.0 sc
S
n
231.0 228.625015 m
227.125015 228.625015 l
227.125015 220.875015 l
234.875015 220.875015 l
234.875015 228.625015 l
eofill
n
204.75 226.625015 m
200.875015 226.625015 l
200.875015 218.875015 l
208.625015 218.875015 l
208.625015 226.625015 l
eofill
n
179.0 218.625015 m
175.125015 218.625015 l
175.125015 210.875015 l
182.875015 210.875015 l
182.875015 218.625015 l
eofill
n
163.25 207.875015 m
159.375 207.875015 l
159.375 200.125015 l
167.125015 200.125015 l
167.125015 207.875015 l
eofill
n
153.0 204.375015 m
149.125 204.375015 l
149.125 196.625015 l
156.875 196.625015 l
156.875 204.375015 l
eofill
n
142.25 194.625015 m
138.375 194.625015 l
138.375 186.875015 l
146.125 186.875015 l
146.125 194.625015 l
eofill
n
131.5 181.125015 m
127.625008 181.125015 l
127.625008 173.375015 l
135.375 173.375015 l
135.375 181.125015 l
eofill
n
121.5 164.125015 m
117.625008 164.125015 l
117.625008 156.375 l
125.375008 156.375 l
125.375008 164.125015 l
eofill
n
114.25 151.375 m
110.375008 151.375 l
110.375008 143.625 l
118.125008 143.625 l
118.125008 151.375 l
eofill
n
109.0 139.875 m
105.125008 139.875 l
105.125008 132.125 l
112.875008 132.125 l
112.875008 139.875 l
eofill
n
103.75 129.625 m
99.875008 129.625 l
99.875008 121.875008 l
107.625008 121.875008 l
107.625008 129.625 l
eofill
n
98.5 119.125008 m
94.625008 119.125008 l
94.625008 111.375008 l
102.375008 111.375008 l
102.375008 119.125008 l
eofill
n
93.5 107.625008 m
89.625008 107.625008 l
89.625008 99.875008 l
97.375008 99.875008 l
97.375008 107.625008 l
eofill
n
88.25 98.875008 m
84.375008 98.875008 l
84.375008 91.125008 l
92.125008 91.125008 l
92.125008 98.875008 l
eofill
n
82.0 79.0 m
82.0 85.0 l
82.0 74.5 m
82.0 68.25 l
91.5 92.25 m
91.5 93.5 l
91.5 87.75 m
91.5 86.5 l
101.5 118.75 m
101.5 119.0 l
101.5 114.0 m
101.5 113.75 l
111.5 138.5 m
111.5 134.0 m
111.5 133.75 l
121.75 160.5 m
121.75 160.75 l
121.75 156.0 m
121.75 155.75 l
132.25 178.0 m
132.25 178.75 l
132.25 173.5 m
132.25 173.0 l
142.5 190.25 m
142.5 191.25 l
142.5 185.75 m
142.5 184.5 l
153.0 203.5 m
153.0 205.5 l
153.0 198.75 m
153.0 196.75 l
163.25 209.0 m
163.25 212.0 l
163.25 204.25 m
163.25 201.25 l
177.5 215.5 m
177.5 219.25 l
177.5 211.0 m
177.5 207.25 l
197.5 222.25 m
197.5 229.0 l
197.5 217.5 m
197.5 210.75 l
217.75 212.25 m
217.75 226.5 l
217.75 207.75 m
217.75 193.5 l
239.25 225.5 m
239.25 246.75 l
239.25 220.75 m
239.25 199.5 l
266.75 226.5 m
266.75 245.75 l
266.75 222.0 m
266.75 202.75 l
0.34902 0.83137 0.32941 sc
S
n
262.125 225.792007 m
271.375 225.792007 l
263.891998 220.355011 l
266.75 229.152008 l
269.608002 220.355011 l
f
n
234.625015 224.792007 m
243.875015 224.792007 l
236.392014 219.355011 l
239.25 228.152008 l
242.108017 219.355011 l
f
n
213.125015 211.542007 m
222.375015 211.542007 l
214.892014 206.105011 l
217.75 214.902008 l
220.608017 206.105011 l
f
n
192.875015 221.292007 m
202.125015 221.292007 l
194.642014 215.855011 l
197.5 224.652008 l
200.358017 215.855011 l
f
n
172.875015 214.792007 m
182.125015 214.792007 l
174.642014 209.355011 l
177.5 218.152008 l
180.358002 209.355011 l
f
n
158.625 208.292007 m
167.875015 208.292007 l
160.392014 202.855011 l
163.25 211.652008 l
166.108002 202.855011 l
f
n
148.375 202.792007 m
157.625 202.792007 l
150.142014 197.355011 l
153.0 206.152008 l
155.858002 197.355011 l
f
n
137.875 189.542007 m
147.125 189.542007 l
139.642014 184.105011 l
142.5 192.902008 l
145.358002 184.105011 l
f
n
127.625008 177.292007 m
136.875 177.292007 l
129.392014 171.855011 l
132.25 180.652008 l
135.108002 171.855011 l
f
n
117.125008 159.792007 m
126.375008 159.792007 l
118.892006 154.355011 l
121.75 163.152008 l
124.608009 154.355011 l
f
n
106.875008 137.792007 m
116.125008 137.792007 l
108.642006 132.355011 l
111.5 141.152008 l
114.358002 132.355011 l
f
n
96.875008 117.792007 m
106.125008 117.792007 l
98.642006 112.355003 l
101.5 121.152008 l
104.358002 112.355003 l
f
n
86.875008 91.542007 m
96.125008 91.542007 l
88.642006 86.105003 l
91.5 94.902008 l
94.358002 86.105003 l
f
n
77.375 78.292007 m
86.625008 78.292007 l
79.142006 72.855003 l
82.0 81.652 l
84.858002 72.855003 l
f
n
226.875015 274.958008 m
229.958008 274.958008 l
229.958008 271.875 l
233.042007 271.875 l
233.042007 274.958008 l
236.125015 274.958008 l
236.125015 278.042023 l
233.042007 278.042023 l
233.042007 281.125 l
229.958008 281.125 l
229.958008 278.042023 l
226.875015 278.042023 l
h
200.875015 260.708008 m
203.958008 260.708008 l
203.958008 257.625 l
207.042007 257.625 l
207.042007 260.708008 l
210.125015 260.708008 l
210.125015 263.792023 l
207.042007 263.792023 l
207.042007 266.875 l
203.958008 266.875 l
203.958008 263.792023 l
200.875015 263.792023 l
h
174.875015 235.208008 m
177.958008 235.208008 l
177.958008 232.125015 l
181.042007 232.125015 l
181.042007 235.208008 l
184.125015 235.208008 l
184.125015 238.292007 l
181.042007 238.292007 l
181.042007 241.375015 l
177.958008 241.375015 l
177.958008 238.292007 l
174.875015 238.292007 l
h
158.625 216.458008 m
161.708008 216.458008 l
161.708008 213.375015 l
164.792007 213.375015 l
164.792007 216.458008 l
167.875015 216.458008 l
167.875015 219.542007 l
164.792007 219.542007 l
164.792007 222.625015 l
161.708008 222.625015 l
161.708008 219.542007 l
158.625 219.542007 l
h
148.375 199.958008 m
151.458008 199.958008 l
151.458008 196.875015 l
154.542007 196.875015 l
154.542007 199.958008 l
157.625 199.958008 l
157.625 203.042007 l
154.542007 203.042007 l
154.542007 206.125015 l
151.458008 206.125015 l
151.458008 203.042007 l
148.375 203.042007 l
h
137.625 178.458008 m
140.708008 178.458008 l
140.708008 175.375015 l
143.792007 175.375015 l
143.792007 178.458008 l
146.875 178.458008 l
146.875 181.542007 l
143.792007 181.542007 l
143.792007 184.625015 l
140.708008 184.625015 l
140.708008 181.542007 l
137.625 181.542007 l
h
127.125008 160.208008 m
130.208008 160.208008 l
130.208008 157.125 l
133.292007 157.125 l
133.292007 160.208008 l
136.375 160.208008 l
136.375 163.292007 l
133.292007 163.292007 l
133.292007 166.375015 l
130.208008 166.375015 l
130.208008 163.292007 l
127.125008 163.292007 l
h
116.875008 136.958008 m
119.958008 136.958008 l
119.958008 133.875 l
123.042007 133.875 l
123.042007 136.958008 l
126.125008 136.958008 l
126.125008 140.042007 l
123.042007 140.042007 l
123.042007 143.125 l
119.958008 143.125 l
119.958008 140.042007 l
116.875008 140.042007 l
h
109.625008 120.208008 m
112.708008 120.208008 l
112.708008 117.125008 l
115.792007 117.125008 l
115.792007 120.208008 l
118.875008 120.208008 l
118.875008 123.292007 l
115.792007 123.292007 l
115.792007 126.375008 l
112.708008 126.375008 l
112.708008 123.292007 l
109.625008 123.292007 l
h
104.375008 109.708008 m
107.458008 109.708008 l
107.458008 106.625008 l
110.542007 106.625008 l
110.542007 109.708008 l
113.625008 109.708008 l
113.625008 112.792007 l
110.542007 112.792007 l
110.542007 115.875008 l
107.458008 115.875008 l
107.458008 112.792007 l
104.375008 112.792007 l
h
99.125008 99.958008 m
102.208008 99.958008 l
102.208008 96.875008 l
105.292007 96.875008 l
105.292007 99.958008 l
108.375008 99.958008 l
108.375008 103.042007 l
105.292007 103.042007 l
105.292007 106.125008 l
102.208008 106.125008 l
102.208008 103.042007 l
99.125008 103.042007 l
h
93.875008 90.958008 m
96.958008 90.958008 l
96.958008 87.875008 l
100.042007 87.875008 l
100.042007 90.958008 l
103.125008 90.958008 l
103.125008 94.042007 l
100.042007 94.042007 l
100.042007 97.125008 l
96.958008 97.125008 l
96.958008 94.042007 l
93.875008 94.042007 l
h
1.0 0.0 1.0 sc
S
n
102.0 91.5 m
102.0 93.25 l
102.0 84.0 m
102.0 82.25 l
112.0 103.5 m
112.0 96.25 m
112.0 96.0 l
174.0 233.5 m
174.0 234.25 l
174.0 226.0 m
174.0 225.25 l
184.25 243.25 m
184.25 244.75 l
184.25 236.0 m
184.25 234.75 l
198.75 260.0 m
198.75 261.25 l
198.75 252.5 m
198.75 251.25 l
219.75 275.25 m
219.75 278.75 l
219.75 268.0 m
219.75 264.5 l
240.25 301.75 m
240.25 309.5 l
240.25 294.25 m
240.25 286.5 l
267.5 289.5 m
267.5 301.25 l
267.5 282.25 m
267.5 270.5 l
271.355011 286.019989 m
271.355011 288.159027 269.619019 289.89502 267.47998 289.89502 c
265.341003 289.89502 263.605011 288.159027 263.605011 286.019989 c
263.605011 283.881012 265.341003 282.14502 267.47998 282.14502 c
269.619019 282.14502 271.355011 283.881012 271.355011 286.019989 c
244.115005 298.019989 m
244.115005 300.159027 242.379013 301.89502 240.23999 301.89502 c
238.101013 301.89502 236.365005 300.159027 236.365005 298.019989 c
236.365005 295.881012 238.101013 294.14502 240.23999 294.14502 c
242.379013 294.14502 244.115005 295.881012 244.115005 298.019989 c
223.655014 271.5 m
223.655014 273.639008 221.919006 275.375 219.779999 275.375 c
217.641006 275.375 215.905014 273.639008 215.905014 271.5 c
215.905014 269.361023 217.641006 267.625 219.779999 267.625 c
221.919006 267.625 223.655014 269.361023 223.655014 271.5 c
202.655014 256.259979 m
202.655014 258.399017 200.919006 260.13501 198.779999 260.13501 c
196.641006 260.13501 194.905014 258.399017 194.905014 256.259979 c
194.905014 254.121017 196.641006 252.38501 198.779999 252.38501 c
200.919006 252.38501 202.655014 254.121017 202.655014 256.259979 c
188.13501 239.759995 m
188.13501 241.899017 186.399002 243.63501 184.259995 243.63501 c
182.121002 243.63501 180.38501 241.899017 180.38501 239.759995 c
180.38501 237.621017 182.121002 235.88501 184.259995 235.88501 c
186.399002 235.88501 188.13501 237.621017 188.13501 239.759995 c
177.875015 229.73999 m
177.875015 231.879013 176.139008 233.615005 174.0 233.615005 c
171.861008 233.615005 170.125015 231.879013 170.125015 229.73999 c
170.125015 227.601013 171.861008 225.865005 174.0 225.865005 c
176.139008 225.865005 177.875015 227.601013 177.875015 229.73999 c
167.375015 214.259995 m
167.375015 216.399017 165.639008 218.13501 163.5 218.13501 c
161.361008 218.13501 159.625 216.399017 159.625 214.259995 c
159.625 212.121017 161.361008 210.38501 163.5 210.38501 c
165.639008 210.38501 167.375015 212.121017 167.375015 214.259995 c
156.875 190.259995 m
156.875 192.399002 155.139008 194.13501 153.0 194.13501 c
150.861008 194.13501 149.125 192.399002 149.125 190.259995 c
149.125 188.121002 150.861008 186.38501 153.0 186.38501 c
155.139008 186.38501 156.875 188.121002 156.875 190.259995 c
146.615005 173.519989 m
146.615005 175.659012 144.879013 177.395004 142.73999 177.395004 c
140.601013 177.395004 138.865005 175.659012 138.865005 173.519989 c
138.865005 171.381012 140.601013 169.645004 142.73999 169.645004 c
144.879013 169.645004 146.615005 171.381012 146.615005 173.519989 c
136.355011 148.259995 m
136.355011 150.399002 134.619003 152.13501 132.479996 152.13501 c
130.341003 152.13501 128.605011 150.399002 128.605011 148.259995 c
128.605011 146.121002 130.341003 144.38501 132.479996 144.38501 c
134.619003 144.38501 136.355011 146.121002 136.355011 148.259995 c
126.095009 128.520004 m
126.095009 130.659012 124.359009 132.395004 122.219994 132.395004 c
120.081009 132.395004 118.345009 130.659012 118.345009 128.520004 c
118.345009 126.381004 120.081009 124.645004 122.219994 124.645004 c
124.359009 124.645004 126.095009 126.381004 126.095009 128.520004 c
115.895004 99.779999 m
115.895004 101.919006 114.159004 103.655006 112.019997 103.655006 c
109.881004 103.655006 108.145004 101.919006 108.145004 99.779999 c
108.145004 97.641006 109.881004 95.905006 112.019997 95.905006 c
114.159004 95.905006 115.895004 97.641006 115.895004 99.779999 c
105.875008 87.779999 m
105.875008 89.919006 104.139008 91.655006 102.0 91.655006 c
99.861008 91.655006 98.125008 89.919006 98.125008 87.779999 c
98.125008 85.641006 99.861008 83.905006 102.0 83.905006 c
104.139008 83.905006 105.875008 85.641006 105.875008 87.779999 c
[/DeviceGray] cs 0.0 sc
S
n
111.5 109.0 m
111.5 139.5 l
111.5 101.75 m
111.5 71.25 l
129.75 125.5 m
129.75 142.75 l
129.75 118.25 m
129.75 101.0 l
145.5 179.5 m
145.5 191.25 l
145.5 172.25 m
145.5 160.5 l
163.75 204.75 m
163.75 214.25 l
163.75 197.5 m
163.75 188.0 l
184.5 235.75 m
184.5 248.5 l
184.5 228.25 m
184.5 215.5 l
208.0 266.5 m
208.0 282.5 l
208.0 259.0 m
208.0 243.0 l
236.5 286.25 m
236.5 309.0 l
236.5 279.0 m
236.5 256.25 l
236.5 286.375 m
232.625015 286.375 l
232.625015 278.625 l
240.375015 278.625 l
240.375015 286.375 l
h
208.0 266.625 m
204.125015 266.625 l
204.125015 258.875 l
211.875015 258.875 l
211.875015 266.625 l
h
184.5 235.875015 m
180.625015 235.875015 l
180.625015 228.125015 l
188.375015 228.125015 l
188.375015 235.875015 l
h
163.75 205.125015 m
159.875 205.125015 l
159.875 197.375015 l
167.625015 197.375015 l
167.625015 205.125015 l
h
145.5 179.625015 m
141.625 179.625015 l
141.625 171.875015 l
149.375 171.875015 l
149.375 179.625015 l
h
129.75 125.625008 m
125.875008 125.625008 l
125.875008 117.875008 l
133.625 117.875008 l
133.625 125.625008 l
h
111.5 109.125008 m
107.625008 109.125008 l
107.625008 101.375008 l
115.375008 101.375008 l
115.375008 109.125008 l
h
/E2 /ColorSpace findRes cs 0.52941 0.4 0.34118 sc
S
[/DeviceGray] cs 0.0 sc
67.25 382.0 m
/N12 15.645798 Tf
(\(a\))
[5.209934 8.699059 5.209934 ] pdfxs
n
283.5 0.059998 272.0 452.690002 re
/E2 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
283.5 68.0 234.0 339.5 re
f
n
517.5 68.0 -234.0 339.5 re
283.5 68.0 m
h
[/DeviceGray] cs 0.0 sc
S
n
283.5 68.0 234.0 339.5 re
/E2 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
517.5 68.0 -234.0 339.5 re
283.5 68.0 m
h
283.5 68.0 m
517.5 68.0 l
283.5 68.0 m
517.5 68.0 l
[/DeviceGray] cs 0.0 sc
S
391.25 33.25 m
/N12 15.681793 Tf
( \(GeV\))
[4.359537 5.22192 12.200433 8.719073 10.459873 5.22192 ] pdfxs
384.75 28.5 m
/N12 10.147095 Tf
(T) show
363.5 33.25 m
/N12 15.681793 Tf
(KE)
[11.322257 10.459873 ] pdfxs
n
290.0 79.5 m
290.0 68.0 l
303.0 73.75 m
303.0 68.0 l
316.0 73.75 m
316.0 68.0 l
329.0 73.75 m
329.0 68.0 l
342.0 73.75 m
342.0 68.0 l
355.0 79.5 m
355.0 68.0 l
368.0 73.75 m
368.0 68.0 l
381.0 73.75 m
381.0 68.0 l
394.0 73.75 m
394.0 68.0 l
407.0 73.75 m
407.0 68.0 l
420.0 79.5 m
420.0 68.0 l
433.0 73.75 m
433.0 68.0 l
446.0 73.75 m
446.0 68.0 l
459.0 73.75 m
459.0 68.0 l
472.0 73.75 m
472.0 68.0 l
485.0 79.5 m
485.0 68.0 l
290.0 79.5 m
290.0 68.0 l
485.0 79.5 m
485.0 68.0 l
498.0 73.75 m
498.0 68.0 l
511.0 73.75 m
511.0 68.0 l
S
285.25 51.5 m
/N12 16.604294 Tf
(0123)
[65.50061 64.250313 64.499374 65.50061 ] pdfxs
n
283.5 407.5 m
517.5 407.5 l
290.0 395.75 m
290.0 407.5 l
303.0 401.75 m
303.0 407.5 l
316.0 401.75 m
316.0 407.5 l
329.0 401.75 m
329.0 407.5 l
342.0 401.75 m
342.0 407.5 l
355.0 395.75 m
355.0 407.5 l
368.0 401.75 m
368.0 407.5 l
381.0 401.75 m
381.0 407.5 l
394.0 401.75 m
394.0 407.5 l
407.0 401.75 m
407.0 407.5 l
420.0 395.75 m
420.0 407.5 l
433.0 401.75 m
433.0 407.5 l
446.0 401.75 m
446.0 407.5 l
459.0 401.75 m
459.0 407.5 l
472.0 401.75 m
472.0 407.5 l
485.0 395.75 m
485.0 407.5 l
290.0 395.75 m
290.0 407.5 l
485.0 395.75 m
485.0 407.5 l
498.0 401.75 m
498.0 407.5 l
511.0 401.75 m
511.0 407.5 l
283.5 68.0 m
283.5 407.5 l
289.5 68.0 m
283.5 68.0 l
286.5 88.5 m
283.5 88.5 l
286.5 109.0 m
283.5 109.0 l
286.5 129.75 m
283.5 129.75 l
286.5 150.25 m
283.5 150.25 l
289.5 170.75 m
283.5 170.75 l
286.5 191.5 m
283.5 191.5 l
286.5 212.0 m
283.5 212.0 l
286.5 232.5 m
283.5 232.5 l
286.5 253.25 m
283.5 253.25 l
289.5 273.75 m
283.5 273.75 l
286.5 294.25 m
283.5 294.25 l
286.5 315.0 m
283.5 315.0 l
286.5 335.5 m
283.5 335.5 l
286.5 356.0 m
283.5 356.0 l
289.5 376.5 m
283.5 376.5 l
289.5 376.5 m
283.5 376.5 l
286.5 397.25 m
283.5 397.25 l
517.5 68.0 m
517.5 407.5 l
511.25 68.0 m
517.5 68.0 l
514.5 88.5 m
517.5 88.5 l
514.5 109.0 m
517.5 109.0 l
514.5 129.75 m
517.5 129.75 l
514.5 150.25 m
517.5 150.25 l
511.25 170.75 m
517.5 170.75 l
514.5 191.5 m
517.5 191.5 l
514.5 212.0 m
517.5 212.0 l
514.5 232.5 m
517.5 232.5 l
514.5 253.25 m
517.5 253.25 l
511.25 273.75 m
517.5 273.75 l
514.5 294.25 m
517.5 294.25 l
514.5 315.0 m
517.5 315.0 l
514.5 335.5 m
517.5 335.5 l
514.5 356.0 m
517.5 356.0 l
511.25 376.5 m
517.5 376.5 l
511.25 376.5 m
517.5 376.5 l
514.5 397.25 m
517.5 397.25 l
S
n
488.5 217.5 m
488.5 219.75 l
488.5 210.0 m
488.5 208.0 l
/E2 /ColorSpace findRes cs 1.0 0.0 0.0 sc
S
n
492.39502 213.779999 m
492.39502 215.919006 490.659027 217.655014 488.519989 217.655014 c
486.381012 217.655014 484.64502 215.919006 484.64502 213.779999 c
484.64502 211.641006 486.381012 209.905014 488.519989 209.905014 c
490.659027 209.905014 492.39502 211.641006 492.39502 213.779999 c
eofill
n
459.63501 226.259995 m
459.63501 228.399017 457.899017 230.13501 455.759979 230.13501 c
453.621033 230.13501 451.88501 228.399017 451.88501 226.259995 c
451.88501 224.121017 453.621033 222.38501 455.759979 222.38501 c
457.899017 222.38501 459.63501 224.121017 459.63501 226.259995 c
eofill
n
427.355011 223.979996 m
427.355011 226.119003 425.619019 227.855011 423.47998 227.855011 c
421.341034 227.855011 419.605011 226.119003 419.605011 223.979996 c
419.605011 221.841003 421.341034 220.105011 423.47998 220.105011 c
425.619019 220.105011 427.355011 221.841003 427.355011 223.979996 c
eofill
n
408.095032 218.220001 m
408.095032 220.359009 406.359009 222.095016 404.220001 222.095016 c
402.081024 222.095016 400.345032 220.359009 400.345032 218.220001 c
400.345032 216.081009 402.081024 214.345016 404.220001 214.345016 c
406.359009 214.345016 408.095032 216.081009 408.095032 218.220001 c
eofill
n
395.13501 210.479996 m
395.13501 212.619003 393.399017 214.355011 391.259979 214.355011 c
389.121033 214.355011 387.38501 212.619003 387.38501 210.479996 c
387.38501 208.341003 389.121033 206.605011 391.259979 206.605011 c
393.399017 206.605011 395.13501 208.341003 395.13501 210.479996 c
eofill
n
381.63501 201.23999 m
381.63501 203.379013 379.899017 205.115005 377.759979 205.115005 c
375.621033 205.115005 373.88501 203.379013 373.88501 201.23999 c
373.88501 199.101013 375.621033 197.365005 377.759979 197.365005 c
379.899017 197.365005 381.63501 199.101013 381.63501 201.23999 c
eofill
n
368.615021 190.019989 m
368.615021 192.159012 366.879028 193.895004 364.73999 193.895004 c
362.601013 193.895004 360.865021 192.159012 360.865021 190.019989 c
360.865021 187.881012 362.601013 186.145004 364.73999 186.145004 c
366.879028 186.145004 368.615021 187.881012 368.615021 190.019989 c
eofill
n
355.89502 176.519989 m
355.89502 178.659012 354.159027 180.395004 352.019989 180.395004 c
349.881012 180.395004 348.14502 178.659012 348.14502 176.519989 c
348.14502 174.381012 349.881012 172.645004 352.019989 172.645004 c
354.159027 172.645004 355.89502 174.381012 355.89502 176.519989 c
eofill
n
347.13501 164.759995 m
347.13501 166.899002 345.399017 168.63501 343.259979 168.63501 c
341.121002 168.63501 339.38501 166.899002 339.38501 164.759995 c
339.38501 162.621002 341.121002 160.88501 343.259979 160.88501 c
345.399017 160.88501 347.13501 162.621002 347.13501 164.759995 c
eofill
n
340.655029 155.519989 m
340.655029 157.659012 338.919006 159.395004 336.779999 159.395004 c
334.641022 159.395004 332.905029 157.659012 332.905029 155.519989 c
332.905029 153.381012 334.641022 151.645004 336.779999 151.645004 c
338.919006 151.645004 340.655029 153.381012 340.655029 155.519989 c
eofill
n
334.115021 146.220001 m
334.115021 148.359009 332.379028 150.095001 330.23999 150.095001 c
328.101013 150.095001 326.365021 148.359009 326.365021 146.220001 c
326.365021 144.081009 328.101013 142.345001 330.23999 142.345001 c
332.379028 142.345001 334.115021 144.081009 334.115021 146.220001 c
eofill
n
327.875031 135.779999 m
327.875031 137.919006 326.139008 139.655014 324.0 139.655014 c
321.861023 139.655014 320.125 137.919006 320.125 135.779999 c
320.125 133.641006 321.861023 131.904999 324.0 131.904999 c
326.139008 131.904999 327.875031 133.641006 327.875031 135.779999 c
eofill
n
321.63501 125.519997 m
321.63501 127.659004 319.899017 129.395004 317.759979 129.395004 c
315.621002 129.395004 313.88501 127.659004 313.88501 125.519997 c
313.88501 123.381004 315.621002 121.645004 317.759979 121.645004 c
319.899017 121.645004 321.63501 123.381004 321.63501 125.519997 c
eofill
n
315.39502 113.759995 m
315.39502 115.899002 313.659027 117.635002 311.519989 117.635002 c
309.381012 117.635002 307.64502 115.899002 307.64502 113.759995 c
307.64502 111.621002 309.381012 109.885002 311.519989 109.885002 c
313.659027 109.885002 315.39502 111.621002 315.39502 113.759995 c
eofill
n
309.095001 102.239998 m
309.095001 104.379005 307.359009 106.115005 305.220001 106.115005 c
303.081024 106.115005 301.345001 104.379005 301.345001 102.239998 c
301.345001 100.101006 303.081024 98.365005 305.220001 98.365005 c
307.359009 98.365005 309.095001 100.101006 309.095001 102.239998 c
eofill
n
303.39502 91.5 m
303.39502 93.639008 301.659027 95.375008 299.519989 95.375008 c
297.381012 95.375008 295.64502 93.639008 295.64502 91.5 c
295.64502 89.361008 297.381012 87.625008 299.519989 87.625008 c
301.659027 87.625008 303.39502 89.361008 303.39502 91.5 c
eofill
n
435.75 226.5 m
435.75 219.25 m
467.75 228.5 m
467.75 232.5 l
467.75 221.0 m
467.75 217.0 l
0.0 0.0 1.0 sc
S
n
467.75 228.625015 m
463.875031 228.625015 l
463.875031 220.875015 l
471.625031 220.875015 l
471.625031 228.625015 l
eofill
n
435.75 226.625015 m
431.875031 226.625015 l
431.875031 218.875015 l
439.625031 218.875015 l
439.625031 226.625015 l
eofill
n
404.0 218.625015 m
400.125031 218.625015 l
400.125031 210.875015 l
407.875031 210.875015 l
407.875031 218.625015 l
eofill
n
385.0 207.875015 m
381.125031 207.875015 l
381.125031 200.125015 l
388.875031 200.125015 l
388.875031 207.875015 l
eofill
n
372.5 204.375015 m
368.625031 204.375015 l
368.625031 196.625015 l
376.375031 196.625015 l
376.375031 204.375015 l
eofill
n
359.75 194.625015 m
355.875031 194.625015 l
355.875031 186.875015 l
363.625031 186.875015 l
363.625031 194.625015 l
eofill
n
347.25 181.125015 m
343.375031 181.125015 l
343.375031 173.375015 l
351.125031 173.375015 l
351.125031 181.125015 l
eofill
n
335.75 164.125015 m
331.875031 164.125015 l
331.875031 156.375 l
339.625031 156.375 l
339.625031 164.125015 l
eofill
n
327.5 151.375 m
323.625031 151.375 l
323.625031 143.625 l
331.375031 143.625 l
331.375031 151.375 l
eofill
n
321.75 139.875 m
317.875 139.875 l
317.875 132.125 l
325.625031 132.125 l
325.625031 139.875 l
eofill
n
316.25 129.625 m
312.375 129.625 l
312.375 121.875008 l
320.125 121.875008 l
320.125 129.625 l
eofill
n
311.0 119.125008 m
307.125 119.125008 l
307.125 111.375008 l
314.875 111.375008 l
314.875 119.125008 l
eofill
n
306.0 107.625008 m
302.125 107.625008 l
302.125 99.875008 l
309.875 99.875008 l
309.875 107.625008 l
eofill
n
301.25 98.875008 m
297.375 98.875008 l
297.375 91.125008 l
305.125 91.125008 l
305.125 98.875008 l
eofill
n
296.5 79.0 m
296.5 85.0 l
296.5 74.5 m
296.5 68.25 l
304.25 92.25 m
304.25 93.5 l
304.25 87.75 m
304.25 86.5 l
313.75 118.75 m
313.75 119.0 l
313.75 114.0 m
313.75 113.75 l
324.25 138.5 m
324.25 134.0 m
324.25 133.75 l
336.0 160.5 m
336.0 160.75 l
336.0 156.0 m
336.0 155.75 l
347.75 178.0 m
347.75 178.75 l
347.75 173.5 m
347.75 173.0 l
360.0 190.25 m
360.0 191.25 l
360.0 185.75 m
360.0 184.5 l
372.25 203.5 m
372.25 205.5 l
372.25 198.75 m
372.25 196.75 l
384.75 209.0 m
384.75 212.0 l
384.75 204.25 m
384.75 201.25 l
402.25 215.5 m
402.25 219.25 l
402.25 211.0 m
402.25 207.25 l
426.5 222.25 m
426.5 229.0 l
426.5 217.5 m
426.5 210.75 l
451.5 212.25 m
451.5 226.5 l
451.5 207.75 m
451.5 193.5 l
478.0 225.5 m
478.0 246.75 l
478.0 220.75 m
478.0 199.5 l
511.75 226.5 m
511.75 245.75 l
511.75 222.0 m
511.75 202.75 l
0.34902 0.83137 0.32941 sc
S
n
507.125031 225.792007 m
516.375 225.792007 l
508.892029 220.355011 l
511.75 229.152008 l
514.608032 220.355011 l
f
n
473.375031 224.792007 m
482.625031 224.792007 l
475.142029 219.355011 l
478.0 228.152008 l
480.858032 219.355011 l
f
n
446.875031 211.542007 m
456.125031 211.542007 l
448.642029 206.105011 l
451.5 214.902008 l
454.358032 206.105011 l
f
n
421.875031 221.292007 m
431.125031 221.292007 l
423.642029 215.855011 l
426.5 224.652008 l
429.358032 215.855011 l
f
n
397.625031 214.792007 m
406.875031 214.792007 l
399.392029 209.355011 l
402.25 218.152008 l
405.108032 209.355011 l
f
n
380.125031 208.292007 m
389.375031 208.292007 l
381.892029 202.855011 l
384.75 211.652008 l
387.608032 202.855011 l
f
n
367.625031 202.792007 m
376.875031 202.792007 l
369.392029 197.355011 l
372.25 206.152008 l
375.108032 197.355011 l
f
n
355.375031 189.542007 m
364.625031 189.542007 l
357.142029 184.105011 l
360.0 192.902008 l
362.858032 184.105011 l
f
n
343.125031 177.292007 m
352.375031 177.292007 l
344.892029 171.855011 l
347.75 180.652008 l
350.608002 171.855011 l
f
n
331.375031 159.792007 m
340.625031 159.792007 l
333.142029 154.355011 l
336.0 163.152008 l
338.858002 154.355011 l
f
n
319.625 137.792007 m
328.875031 137.792007 l
321.392029 132.355011 l
324.25 141.152008 l
327.108002 132.355011 l
f
n
309.125 117.792007 m
318.375 117.792007 l
310.892029 112.355003 l
313.75 121.152008 l
316.608002 112.355003 l
f
n
299.625 91.542007 m
308.875 91.542007 l
301.392029 86.105003 l
304.25 94.902008 l
307.108002 86.105003 l
f
n
291.875 78.292007 m
301.125 78.292007 l
293.642029 72.855003 l
296.5 81.652 l
299.358002 72.855003 l
f
n
441.375031 274.958008 m
444.458008 274.958008 l
444.458008 271.875 l
447.542023 271.875 l
447.542023 274.958008 l
450.625031 274.958008 l
450.625031 278.042023 l
447.542023 278.042023 l
447.542023 281.125 l
444.458008 281.125 l
444.458008 278.042023 l
441.375031 278.042023 l
h
410.375031 260.708008 m
413.458008 260.708008 l
413.458008 257.625 l
416.542023 257.625 l
416.542023 260.708008 l
419.625031 260.708008 l
419.625031 263.792023 l
416.542023 263.792023 l
416.542023 266.875 l
413.458008 266.875 l
413.458008 263.792023 l
410.375031 263.792023 l
h
380.125031 235.208008 m
383.208008 235.208008 l
383.208008 232.125015 l
386.292023 232.125015 l
386.292023 235.208008 l
389.375031 235.208008 l
389.375031 238.292007 l
386.292023 238.292007 l
386.292023 241.375015 l
383.208008 241.375015 l
383.208008 238.292007 l
380.125031 238.292007 l
h
361.625031 216.458008 m
364.708008 216.458008 l
364.708008 213.375015 l
367.792023 213.375015 l
367.792023 216.458008 l
370.875031 216.458008 l
370.875031 219.542007 l
367.792023 219.542007 l
367.792023 222.625015 l
364.708008 222.625015 l
364.708008 219.542007 l
361.625031 219.542007 l
h
350.125031 199.958008 m
353.208008 199.958008 l
353.208008 196.875015 l
356.292023 196.875015 l
356.292023 199.958008 l
359.375031 199.958008 l
359.375031 203.042007 l
356.292023 203.042007 l
356.292023 206.125015 l
353.208008 206.125015 l
353.208008 203.042007 l
350.125031 203.042007 l
h
338.625031 178.458008 m
341.708008 178.458008 l
341.708008 175.375015 l
344.792023 175.375015 l
344.792023 178.458008 l
347.875031 178.458008 l
347.875031 181.542007 l
344.792023 181.542007 l
344.792023 184.625015 l
341.708008 184.625015 l
341.708008 181.542007 l
338.625031 181.542007 l
h
327.875031 160.208008 m
330.958008 160.208008 l
330.958008 157.125 l
334.042023 157.125 l
334.042023 160.208008 l
337.125031 160.208008 l
337.125031 163.292007 l
334.042023 163.292007 l
334.042023 166.375015 l
330.958008 166.375015 l
330.958008 163.292007 l
327.875031 163.292007 l
h
317.875 136.958008 m
320.958008 136.958008 l
320.958008 133.875 l
324.042023 133.875 l
324.042023 136.958008 l
327.125031 136.958008 l
327.125031 140.042007 l
324.042023 140.042007 l
324.042023 143.125 l
320.958008 143.125 l
320.958008 140.042007 l
317.875 140.042007 l
h
311.125 120.208008 m
314.208008 120.208008 l
314.208008 117.125008 l
317.292023 117.125008 l
317.292023 120.208008 l
320.375 120.208008 l
320.375 123.292007 l
317.292023 123.292007 l
317.292023 126.375008 l
314.208008 126.375008 l
314.208008 123.292007 l
311.125 123.292007 l
h
306.625 109.708008 m
309.708008 109.708008 l
309.708008 106.625008 l
312.792023 106.625008 l
312.792023 109.708008 l
315.875 109.708008 l
315.875 112.792007 l
312.792023 112.792007 l
312.792023 115.875008 l
309.708008 115.875008 l
309.708008 112.792007 l
306.625 112.792007 l
h
302.375 99.958008 m
305.458008 99.958008 l
305.458008 96.875008 l
308.542023 96.875008 l
308.542023 99.958008 l
311.625 99.958008 l
311.625 103.042007 l
308.542023 103.042007 l
308.542023 106.125008 l
305.458008 106.125008 l
305.458008 103.042007 l
302.375 103.042007 l
h
298.625 90.958008 m
301.708008 90.958008 l
301.708008 87.875008 l
304.792023 87.875008 l
304.792023 90.958008 l
307.875 90.958008 l
307.875 94.042007 l
304.792023 94.042007 l
304.792023 97.125008 l
301.708008 97.125008 l
301.708008 94.042007 l
298.625 94.042007 l
h
1.0 0.0 1.0 sc
S
n
303.5 91.5 m
303.5 93.25 l
303.5 84.0 m
303.5 82.25 l
311.0 103.5 m
311.0 96.25 m
311.0 96.0 l
371.75 233.5 m
371.75 234.25 l
371.75 226.0 m
371.75 225.25 l
383.25 243.25 m
383.25 244.75 l
383.25 236.0 m
383.25 234.75 l
399.75 260.0 m
399.75 261.25 l
399.75 252.5 m
399.75 251.25 l
424.0 275.25 m
424.0 278.75 l
424.0 268.0 m
424.0 264.5 l
448.25 301.75 m
448.25 309.5 l
448.25 294.25 m
448.25 286.5 l
480.75 289.5 m
480.75 301.25 l
480.75 282.25 m
480.75 270.5 l
484.655029 286.019989 m
484.655029 288.159027 482.919037 289.89502 480.779999 289.89502 c
478.641022 289.89502 476.905029 288.159027 476.905029 286.019989 c
476.905029 283.881012 478.641022 282.14502 480.779999 282.14502 c
482.919037 282.14502 484.655029 283.881012 484.655029 286.019989 c
452.13501 298.019989 m
452.13501 300.159027 450.399017 301.89502 448.259979 301.89502 c
446.121033 301.89502 444.38501 300.159027 444.38501 298.019989 c
444.38501 295.881012 446.121033 294.14502 448.259979 294.14502 c
450.399017 294.14502 452.13501 295.881012 452.13501 298.019989 c
427.89502 271.5 m
427.89502 273.639008 426.159027 275.375 424.019989 275.375 c
421.881012 275.375 420.14502 273.639008 420.14502 271.5 c
420.14502 269.361023 421.881012 267.625 424.019989 267.625 c
426.159027 267.625 427.89502 269.361023 427.89502 271.5 c
403.655029 256.259979 m
403.655029 258.399017 401.919006 260.13501 399.779999 260.13501 c
397.641022 260.13501 395.905029 258.399017 395.905029 256.259979 c
395.905029 254.121017 397.641022 252.38501 399.779999 252.38501 c
401.919006 252.38501 403.655029 254.121017 403.655029 256.259979 c
387.095032 239.759995 m
387.095032 241.899017 385.359009 243.63501 383.220001 243.63501 c
381.081024 243.63501 379.345032 241.899017 379.345032 239.759995 c
379.345032 237.621017 381.081024 235.88501 383.220001 235.88501 c
385.359009 235.88501 387.095032 237.621017 387.095032 239.759995 c
375.63501 229.73999 m
375.63501 231.879013 373.899017 233.615005 371.759979 233.615005 c
369.621033 233.615005 367.88501 231.879013 367.88501 229.73999 c
367.88501 227.601013 369.621033 225.865005 371.759979 225.865005 c
373.899017 225.865005 375.63501 227.601013 375.63501 229.73999 c
364.355011 214.259995 m
364.355011 216.399017 362.619019 218.13501 360.47998 218.13501 c
358.341003 218.13501 356.605011 216.399017 356.605011 214.259995 c
356.605011 212.121017 358.341003 210.38501 360.47998 210.38501 c
362.619019 210.38501 364.355011 212.121017 364.355011 214.259995 c
353.375031 190.259995 m
353.375031 192.399002 351.639008 194.13501 349.5 194.13501 c
347.361023 194.13501 345.625031 192.399002 345.625031 190.259995 c
345.625031 188.121002 347.361023 186.38501 349.5 186.38501 c
351.639008 186.38501 353.375031 188.121002 353.375031 190.259995 c
342.63501 173.519989 m
342.63501 175.659012 340.899017 177.395004 338.759979 177.395004 c
336.621002 177.395004 334.88501 175.659012 334.88501 173.519989 c
334.88501 171.381012 336.621002 169.645004 338.759979 169.645004 c
340.899017 169.645004 342.63501 171.381012 342.63501 173.519989 c
332.615021 148.259995 m
332.615021 150.399002 330.879028 152.13501 328.73999 152.13501 c
326.601013 152.13501 324.865021 150.399002 324.865021 148.259995 c
324.865021 146.121002 326.601013 144.38501 328.73999 144.38501 c
330.879028 144.38501 332.615021 146.121002 332.615021 148.259995 c
323.375031 128.520004 m
323.375031 130.659012 321.639008 132.395004 319.5 132.395004 c
317.361023 132.395004 315.625 130.659012 315.625 128.520004 c
315.625 126.381004 317.361023 124.645004 319.5 124.645004 c
321.639008 124.645004 323.375031 126.381004 323.375031 128.520004 c
314.855011 99.779999 m
314.855011 101.919006 313.119019 103.655006 310.97998 103.655006 c
308.841003 103.655006 307.105011 101.919006 307.105011 99.779999 c
307.105011 97.641006 308.841003 95.905006 310.97998 95.905006 c
313.119019 95.905006 314.855011 97.641006 314.855011 99.779999 c
307.355011 87.779999 m
307.355011 89.919006 305.619019 91.655006 303.47998 91.655006 c
301.341003 91.655006 299.605011 89.919006 299.605011 87.779999 c
299.605011 85.641006 301.341003 83.905006 303.47998 83.905006 c
305.619019 83.905006 307.355011 85.641006 307.355011 87.779999 c
[/DeviceGray] cs 0.0 sc
S
n
308.0 109.0 m
308.0 139.5 l
308.0 101.75 m
308.0 71.25 l
322.25 125.5 m
322.25 142.75 l
322.25 118.25 m
322.25 101.0 l
336.5 179.5 m
336.5 191.25 l
336.5 172.25 m
336.5 160.5 l
354.5 204.75 m
354.5 214.25 l
354.5 197.5 m
354.5 188.0 l
376.5 235.75 m
376.5 248.5 l
376.5 228.25 m
376.5 215.5 l
402.5 266.5 m
402.5 282.5 l
402.5 259.0 m
402.5 243.0 l
435.25 286.25 m
435.25 309.0 l
435.25 279.0 m
435.25 256.25 l
435.25 286.375 m
431.375031 286.375 l
431.375031 278.625 l
439.125031 278.625 l
439.125031 286.375 l
h
402.5 266.625 m
398.625031 266.625 l
398.625031 258.875 l
406.375031 258.875 l
406.375031 266.625 l
h
376.5 235.875015 m
372.625031 235.875015 l
372.625031 228.125015 l
380.375031 228.125015 l
380.375031 235.875015 l
h
354.5 205.125015 m
350.625031 205.125015 l
350.625031 197.375015 l
358.375031 197.375015 l
358.375031 205.125015 l
h
336.5 179.625015 m
332.625031 179.625015 l
332.625031 171.875015 l
340.375031 171.875015 l
340.375031 179.625015 l
h
322.25 125.625008 m
318.375 125.625008 l
318.375 117.875008 l
326.125031 117.875008 l
326.125031 125.625008 l
h
308.0 109.125008 m
304.125 109.125008 l
304.125 101.375008 l
311.875 101.375008 l
311.875 109.125008 l
h
/E2 /ColorSpace findRes cs 0.52941 0.4 0.34118 sc
S
[/DeviceGray] cs 0.0 sc
491.5 382.0 m
/N12 14.759399 Tf
(\(b\))
[4.91477 9.017881 4.91477 ] pdfxs
n
161.5 332.75 243.75 60.0 re
/E2 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
164.0 333.25 239.0 58.75 re
f
n
169.5 333.25 m
169.5 332.75 l
405.25 332.75 l
405.25 386.5 l
403.0 386.5 l
403.0 333.25 l
[/DeviceGray] cs 0.0 sc
eofill
n
164.0 333.25 m
403.0 333.25 -239.0 58.75 re
164.0 333.25 m
h
S
n
177.509995 379.97998 m
177.509995 382.049988 175.830002 383.72998 173.759995 383.72998 c
171.690002 383.72998 170.009995 382.049988 170.009995 379.97998 c
170.009995 377.910004 171.690002 376.22998 173.759995 376.22998 c
175.830002 376.22998 177.509995 377.910004 177.509995 379.97998 c
/E2 /ColorSpace findRes cs 1.0 0.0 0.0 sc
eofill
[/DeviceGray] cs 0.0 sc
218.0 376.5 m
/N12 13.860306 Tf
( \(PHENIX\))
[3.853163 4.615379 9.244927 10.007142 9.244927 10.007142 3.853163 9.244927 4.615379 ] pdfxs
214.5 381.0 m
/N12 9.240204 Tf
(-) show
%ADOBeginSubsetFont: JJAMIC+Symbol Initial
ct_CffDict begin
%ADOt1write: (1.0.21)
13 dict dup begin
/FontType 1 def
/FontName /JJAMIC+Symbol def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Symbol) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 42996 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs [{ct_CffDict/F0Subr get exec} {ct_CffDict/F1Subr get exec}
{ct_CffDict/F2Subr get exec} {ct_CffDict/HSSubr get exec}] def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
end
%ADOEndSubsetFont
[ 1 /pi/Lambda/Xi 32 /space 76 /Lambda 88 /Xi
 112 /pi
/N20/JJAMIC+Symbol -1 TZ
207.0 376.5 m
%ADOBeginSubsetFont: JJAMIC+Symbol AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.21)
systemdict begin
/JJAMIC+Symbol findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/pi <1C60D8A8C9B7967678F2ED2478535EB7B50DECCE78F28089B307456EDB9
089371383F74718798FCF22D6D686185B9074732F57B819259A4E99DD8D356BD
55E81236AB1C67A050E41981869DEEA9296AE9124988026D74E5E4B51B2F6905
7FA95946C8B081DF5096D1A21ACAE3DDF26EB12D2423765790F7377340145B5A
19A613EEE3DA5D67DE190CE253AC7061757FE656DCAC0FAC8E090EBE75E963E5
EADC51139339E48BC7859A965> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/JJAMIC+Symbol findfont /Encoding get
dup 1 /pi put
pop
end
%ADOEndSubsetFont
/N20 13.860306 Tf
(\001) show
198.750351 376.5 m
/N12 13.860306 Tf
(+) show
193.25 381.0 m
/N12 9.240204 Tf
(+) show
186.0 376.5 m
/N20 13.860306 Tf
(\001) show
n
173.75 366.75 m
170.0 366.75 l
170.0 359.25 l
177.5 359.25 l
177.5 366.75 l
/E2 /ColorSpace findRes cs 0.0 0.0 1.0 sc
eofill
[/DeviceGray] cs 0.0 sc
223.75 359.0 m
/N12 13.860306 Tf
( \(PHENIX\))
[3.853163 4.615379 9.244927 10.007142 9.244927 10.007142 3.853163 9.244927 4.615379 ] pdfxs
220.0 365.25 m
/N12 9.240204 Tf
(-) show
201.5 359.0 m
/N12 13.860306 Tf
(+K)
[8.094414 10.007142 ] pdfxs
196.0 365.25 m
/N12 9.240204 Tf
(+) show
186.0 359.0 m
/N12 13.860306 Tf
(K) show
n
169.125015 347.292023 m
178.375015 347.292023 l
170.892014 341.855011 l
173.75 350.652008 l
176.608002 341.855011 l
/E2 /ColorSpace findRes cs 0.34902 0.83137 0.32941 sc
f
[/DeviceGray] cs 0.0 sc
202.5 341.5 m
( \(STAR\))
[3.853163 4.615379 9.244927 8.468542 10.007142 10.007142 4.615379 ] pdfxs
196.0 336.75 m
/N12 9.240204 Tf
(S) show
196.0 347.999939 m
(0) show
186.0 341.5 m
/N12 13.860306 Tf
(K) show
n
295.875 378.458008 m
298.958008 378.458008 l
298.958008 375.375031 l
302.042023 375.375031 l
302.042023 378.458008 l
305.125 378.458008 l
305.125 381.542023 l
302.042023 381.542023 l
302.042023 384.625031 l
298.958008 384.625031 l
298.958008 381.542023 l
295.875 381.542023 l
h
/E2 /ColorSpace findRes cs 1.0 0.0 1.0 sc
S
[/DeviceGray] cs 0.0 sc
336.75 376.5 m
( \(PHENIX\))
[3.853163 4.615379 9.244927 10.007142 9.244927 10.007142 3.853163 9.244927 4.615379 ] pdfxs
328.500336 376.5 m
(p) show
1.5 w
n
328.5 388.5 m
336.75 388.5 l
S
312.0 376.5 m
(p+)
[8.468542 8.094414 ] pdfxs
0.75 w
n
304.22998 363.0 m
304.22998 365.069977 302.549988 366.75 300.47998 366.75 c
298.410004 366.75 296.72998 365.069977 296.72998 363.0 c
296.72998 360.929993 298.410004 359.25 300.47998 359.25 c
302.549988 359.25 304.22998 360.929993 304.22998 363.0 c
S
340.5 359.0 m
( \(STAR\))
[3.853163 4.615379 9.244927 8.468542 10.007142 10.007142 4.615379 ] pdfxs
330.499786 359.0 m
%ADOBeginSubsetFont: JJAMIC+Symbol AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.21)
systemdict begin
/JJAMIC+Symbol findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Lambda <1C60D8A8C9B6232B6469BF27D9CCAFEF545D3936A4FAA7DEB8CF16F
9B3491CA514A441E8391632ABBAC8286BE872454C808A946F89755D20547DAD5
335BFCF90DA3C5423FD226DFF404CF16E6B7916CDC9DA89CA7757F8AD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/JJAMIC+Symbol findfont /Encoding get
dup 2 /Lambda put
pop
end
%ADOEndSubsetFont
/N20 13.860306 Tf
(\002) show
1.5 w
n
330.5 371.0 m
340.5 371.0 l
S
322.0 359.0 m
/N12 13.860306 Tf
(+) show
311.999786 359.0 m
/N20 13.860306 Tf
(\002) show
0.75 w
n
300.5 349.5 m
296.75 349.5 l
296.75 342.0 l
304.25 342.0 l
304.25 349.5 l
h
/E2 /ColorSpace findRes cs 0.52941 0.4 0.34118 sc
S
[/DeviceGray] cs 0.0 sc
348.0 341.5 m
/N12 13.860306 Tf
( \(STAR\))
[3.853163 4.615379 9.244927 8.468542 10.007142 10.007142 4.615379 ] pdfxs
342.25 350.75 m
/N12 9.240204 Tf
(+) show
333.25 341.5 m
%ADOBeginSubsetFont: JJAMIC+Symbol AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.21)
systemdict begin
/JJAMIC+Symbol findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Xi <1C60D8A8C9B678BD651200656B12FB76E9583F472D4D12BD3DB8742EFEF
FC9AAF14A5ACEE9FF7C8AD1D52660F92DD9BECB72733750BFBBDB95B2BA0B189
9187C66B766760F39DF92726612C662FB3D7E272C97BE56771141EA1F7AA7C22
9BB3451809B60AEABD3C76959C61CA47B391B521085D7F1580C9F55F0305D6FE
AC8679DFF56CA65C90504EC1631919BE2C922A0A8FF4E8323950E5036EA4CAF4
BD15C8C465C8A1AD8295BDD5ADE64A33871DAAE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/JJAMIC+Symbol findfont /Encoding get
dup 3 /Xi put
pop
end
%ADOEndSubsetFont
/N20 13.860306 Tf
(\003) show
1.5 w
n
333.25 352.5 m
342.25 352.5 l
S
325.0 341.5 m
/N12 13.860306 Tf
(+) show
321.25 347.0 m
/N12 9.240204 Tf
(-) show
312.0 341.5 m
/N20 13.860306 Tf
(\003) show
n
/JJAMIC+Symbol /Font _pdfUndefineResource
/N20 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font Times-BoldItalic
%%+ font Helvetica-Bold
%%EOF
