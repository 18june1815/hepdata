%!PS-Adobe-3.0 EPSF-3.0
%%Title: (/direct/phenix+data07/missah/analysis/study/plotsfinal/v2qvsKETq.eps: canvas)
%%Version: 1 5
%%Creator: Adobe Acrobat 6.0
%%CreationDate: 20:49:20 07/19/06
%%DocumentData: Clean7Bit
%%LanguageLevel: 3
%%BoundingBox: 9 13 535 377
%%HiResBoundingBox: 8.695602 12.980743 535.322754 376.565369
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L3 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb Printer/PostScript Color Management 0
%%BeginResource: procset l3check 6.0 1
%%Copyright: Copyright 1998,2001-2002 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 3 lt }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: Your printer driver needs to be configured) dup show ==
72 580 moveto (for printing to a PostScript Language Level )dup show ==
systemdict /languagelevel known {(2)}{(1)}ifelse dup show ==
( printer.) dup show ==
/Helvetica-Bold findfont 16 scalefont setfont
72 520 moveto (Windows and Unix) show
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (Select \252Language Level )show
systemdict /languagelevel known {(2)}{(1)}ifelse show
(\272 in the PostScript options section) show
72 480 moveto (of the Acrobat print dialog.) show
/Helvetica-Bold findfont 16 scalefont setfont
72 440 moveto (Macintosh) show
/Times-Roman findfont 16 scalefont setfont
72 420 moveto (In the Chooser, select your printer driver.) show
72 400 moveto (Then select your printer and click the Setup button.) show
72 380 moveto (Follow any on-screen dialogs that may appear.) show
showpage
quit
}
if
%%EndResource
%%BeginResource: file Pscript_T42Hdr PSVER
userdict /ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
  version
  cvi
  2015
  ge
} bind def
/AllocGlyphStorage
{
  Is2015?
  {	
		pop
  } 
  { 
		{string} forall
  } ifelse
} bind def
/Type42DictBegin
{
	25 dict begin
  /FontName exch def
  /CharStrings 256 dict 
	begin
		  /.notdef 0 def
		  currentdict 
	end def
  /Encoding exch def
  /PaintType 0 def
  /FontType 42 def
  /FontMatrix [1 0 0 1 0 0] def
  4 array  astore cvx /FontBBox exch def
  /sfnts
} bind def
/Type42DictEnd  
{
	 currentdict dup /FontName get exch definefont end
	ct_T42Dict exch
	dup /FontName get exch put
} bind def
/RD {string currentfile exch readstring pop} executeonly def
/PrepFor2015
{
	Is2015?
	{		  
		 /GlyphDirectory 
		 16
		 dict def
		 sfnts 0 get
		 dup
		 2 index
		 (glyx)
		 putinterval
		 2 index  
		 (locx)
		 putinterval
		 pop
		 pop
	}
	{
		 pop
		 pop
	} ifelse			
} bind def
/AddT42Char
{
	Is2015?
	{
		/GlyphDirectory get 
		begin
		def
		end
		pop
		pop
	}
	{
		/sfnts get
		4 index
		get
		3 index
	  2 index
		putinterval
		pop
		pop
		pop
		pop
	} ifelse
} bind def
end
%%EndResource
%%BeginResource: file Pscript_CFF PSVER
userdict /ct_CffDict 6 dict put     
ct_CffDict begin                    
/F0Subr     
{
    systemdict /internaldict known 
   {
      1183615869 systemdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } 
   {
      userdict /internaldict known not 
        { 
          userdict /internaldict 
          {
               count 0 eq 
             {/internaldict errordict /invalidaccess get exec} if 
             dup type /integertype ne 
             {/internaldict errordict /invalidaccess get exec} if 
             dup 1183615869 eq
             {pop 0} 
             {/internaldict errordict /invalidaccess get exec} 
             ifelse 
          } 
          dup 14 get 1 25 dict put 
          bind executeonly put 
       } if 
       1183615869 userdict /internaldict get exec 
       /FlxProc known {save true} {false} ifelse
    } ifelse
    [ 
       systemdict /internaldict known not 
       { 100 dict /begin cvx /mtx matrix /def cvx } if 
       systemdict /currentpacking known {currentpacking true setpacking} if 
       { 
          systemdict /internaldict known { 
          1183615869 systemdict /internaldict get exec 
          dup /$FlxDict known not { 
          dup dup length exch maxlength eq 
          { pop userdict dup /$FlxDict known not
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } if } 
          { 100 dict begin /mtx matrix def 
          dup /$FlxDict currentdict put end } 
          ifelse 
          } if /$FlxDict get begin } if 
          grestore 
          /exdef {exch def} def 
          /dmin exch abs 100 div def 
          /epX exdef /epY exdef 
          /c4y2 exdef /c4x2 exdef /c4y1 exdef /c4x1 exdef /c4y0 exdef /c4x0 exdef 
          /c3y2 exdef /c3x2 exdef /c3y1 exdef /c3x1 exdef /c3y0 exdef /c3x0 exdef 
          /c1y2 exdef /c1x2 exdef /c2x2 c4x2 def /c2y2 c4y2 def 
          /yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def 
          /PickCoords {  
          {c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2} 
          {c3x0 c3y0 c3x1 c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2} 
          ifelse 
          /y5 exdef /x5 exdef /y4 exdef /x4 exdef /y3 exdef /x3 exdef 
          /y2 exdef /x2 exdef /y1 exdef /x1 exdef /y0 exdef /x0 exdef 
          } def 
          mtx currentmatrix pop  
          mtx 0 get abs .00001 lt mtx 3 get abs .00001 lt or 
          {/flipXY -1 def} 
          {mtx 1 get abs .00001 lt mtx 2 get abs .00001 lt or 
          {/flipXY 1 def} 
          {/flipXY 0 def} 
          ifelse } 
          ifelse 
          /erosion 1 def 
          systemdict /internaldict known { 
           1183615869 systemdict /internaldict get exec dup  
          /erosion known 
          {/erosion get /erosion exch def} 
          {pop} 
          ifelse 
          } if 
          yflag 
          {
              flipXY 0 eq c3y2 c4y2 eq or 
             {false PickCoords}
             {
                  /shrink c3y2 c4y2 eq 
                {0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs} ifelse def 
                /yshrink {c4y2 sub shrink mul c4y2 add} def 
                /c1y0 c3y0 yshrink def /c1y1 c3y1 yshrink def 
                /c2y0 c4y0 yshrink def /c2y1 c4y1 yshrink def 
                /c1x0 c3x0 def /c1x1 c3x1 def /c2x0 c4x0 def /c2x1 c4x1 def 
                /dY 0 c3y2 c1y2 sub round 
                dtransform flipXY 1 eq {exch} if pop abs def 
                dY dmin lt PickCoords 
                y2 c1y2 sub abs 0.001 gt {
                   c1x2 c1y2 transform flipXY 1 eq {exch} if  
                   /cx exch def /cy exch def 
                   /dY 0 y2 c1y2 sub round dtransform flipXY 1 eq {exch} 
                   if pop def 
                   dY round dup 0 ne 
                   {/dY exdef } 
                   {pop dY 0 lt {-1}{1} ifelse /dY exdef} 
                   ifelse 
                   /erode PaintType 2 ne erosion 0.5 ge and def  
                   erode {/cy cy 0.5 sub def} if 
                   /ey cy dY add def   
                   /ey ey ceiling ey sub ey floor add def   
                   erode {/ey ey 0.5 add def} if   
                   ey cx flipXY 1 eq {exch} if itransform exch pop  
                   y2 sub /eShift exch def  
                   /y1 y1 eShift add def /y2 y2 eShift add def /y3 y3  
                   eShift add def  
                } if  
             } ifelse  
          } 
          {
              flipXY 0 eq c3x2 c4x2 eq or  
             {false PickCoords }  
             { /shrink c3x2 c4x2 eq  
                {0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs} ifelse def  
                /xshrink {c4x2 sub shrink mul c4x2 add} def  
                /c1x0 c3x0 xshrink def /c1x1 c3x1 xshrink def  
                /c2x0 c4x0 xshrink def /c2x1 c4x1 xshrink def  
                /c1y0 c3y0 def /c1y1 c3y1 def /c2y0 c4y0 def /c2y1 c4y1 def  
                /dX c3x2 c1x2 sub round 0 dtransform  
                flipXY -1 eq {exch} if pop abs def 
                dX dmin lt PickCoords  
                x2 c1x2 sub abs 0.001 gt {  
                   c1x2 c1y2 transform flipXY -1 eq {exch} if  
                   /cy exch def /cx exch def   
                   /dX x2 c1x2 sub round 0 dtransform flipXY -1 eq {exch} if pop def  
                   dX round dup 0 ne  
                   {/dX exdef}  
                   {pop dX 0 lt {-1}{1} ifelse /dX exdef}  
                   ifelse  
                   /erode PaintType 2 ne erosion .5 ge and def 
                   erode {/cx cx .5 sub def} if  
                   /ex cx dX add def  
                   /ex ex ceiling ex sub ex floor add def  
                   erode {/ex ex .5 add def} if  
                   ex cy flipXY -1 eq {exch} if itransform pop  
                   x2 sub /eShift exch def  
                   /x1 x1 eShift add def /x2 x2 eShift add def /x3 x3 eShift add def  
                } if  
             } ifelse  
          } ifelse 
          x2 x5 eq y2 y5 eq or  
          {x5 y5 lineto }  
          {x0 y0 x1 y1 x2 y2 curveto  
          x3 y3 x4 y4 x5 y5 curveto}  
          ifelse  
          epY epX   
       }  
       systemdict /currentpacking known {exch setpacking} if   
       /exec cvx /end cvx 
    ] cvx  
    executeonly 
    exch  
    {pop true exch restore}   
    {   
       systemdict /internaldict known not  
       {1183615869 userdict /internaldict get exec  
       exch /FlxProc exch put true}  
       {1183615869 systemdict /internaldict get exec  
       dup length exch maxlength eq  
       {false}   
       {1183615869 systemdict /internaldict get exec 
       exch /FlxProc exch put true}  
       ifelse}  
       ifelse
    } ifelse  
    {
       systemdict /internaldict known  
       {1183615869 systemdict /internaldict get exec /FlxProc get exec}  
       {1183615869 userdict /internaldict get exec /FlxProc get exec}  
       ifelse   
    } if  
} executeonly def
/F1Subr
{gsave currentpoint newpath moveto} bind def 
/F2Subr
{currentpoint grestore gsave currentpoint newpath moveto} bind  def
/HSSubr 
{
   systemdict /internaldict known not
   {pop 3}
   {1183615869 systemdict /internaldict get exec
    dup /startlock known
    {/startlock get exec}
    {dup /strtlck known
    {/strtlck get exec}
    {pop 3}
    ifelse}
    ifelse}
    ifelse
} bind def
end                                 
%%EndResource
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.19 0
%%Copyright: Copyright 1987-2003 Adobe Systems Incorporated.
%%Version: 1.19 0
systemdict /languagelevel known dup
	{ currentglobal false setglobal }
	{ false }
ifelse
exch
userdict /Adobe_CoolType_Utility 2 copy known
	{ 2 copy get dup maxlength 25 add dict copy }
	{ 25 dict }
ifelse put
Adobe_CoolType_Utility
	begin
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch /eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{ globaldict begin currentglobal true setglobal }
if
	/ct_AddStdCIDMap
		ct_Level2?
			{ {
			((Hex) 57 StartData
			0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
			7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
			d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
			cc36 74f4 1144 b13b 77) 0 () /SubFileDecode filter cvx exec
			} }
			{ {
			<BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
			4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A> eexec
			} }
		ifelse bind def
userdict /cid_extensions known
dup { cid_extensions /cid_UpdateDB known and } if
	 {
	 cid_extensions
	 begin
	 /cid_GetCIDSystemInfo
		 {
		 1 index type /stringtype eq
			 { exch cvn exch }
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				 {
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					 {
					 1 index load
					 3 index get
					 dup null eq
						  { pop pop cid_UpdateDB }
						  {
						  exch
						  1 index /Created get eq
							  { exch pop exch pop }
							  { pop cid_UpdateDB }
						  ifelse
						  }
					 ifelse
					 }
					 { pop cid_UpdateDB }
				 ifelse
				 }
				 { cid_UpdateDB }
			 ifelse
			 end
		 } bind def
	 end
	 }
if
ct_Level2?
	{ end setglobal }
if
	/ct_UseNativeCapability?  systemdict /composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring () def
		/usewidths? true def
		end def
	ct_Level2? { setglobal } { pop } ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict /languagelevel known
				{ pop /CIDFont findresource /GlyphDirectory get }
				{
				1 index /CIDFont findresource /GlyphDirectory
				get dup type /dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			} def
		/+
			{
			systemdict /languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{ 1 dict begin }
			ifelse
			/$ exch def
			systemdict /languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			? { $ begin } if
			} def
		/? { $ type /dicttype eq } def
		/| {
			userdict /Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data /AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					  begin
						AddWidths?
								{
								Adobe_CoolType_Data /CC 3 index put
								? { def } { $ 3 1 roll put } ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont /Widths get exch CC exch put
								}
								{ ? { def } { $ 3 1 roll put } ifelse }
							ifelse
					end
				end
				}
				{ ? { def } { $ 3 1 roll put } ifelse }	ifelse
				}
				{ ? { def } { $ 3 1 roll put } ifelse }
			ifelse
			} def
		/!
			{
			? { end } if
			systemdict /languagelevel known
				{ gvm setglobal }
			if
			end
			} def
		/: { string currentfile exch readstring pop } executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		 /c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		 /c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		 /c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		 /c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		 /c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		 /c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		 /c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		 /c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		 /cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		 /cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		 /cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		 /cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		 /cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx [.001 0 0 .001 0 0] def
		/ct_1000Mtx [1000 0 0 1000 0 0] def
		/ct_raise {exch cvx exch errordict exch get exec stop} bind def
		/ct_reraise
			{ cvx $error /errorname get (Error: ) print dup (						  ) cvs print
					errordict exch get exec stop
			} bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			} bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility /ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{ dup string /dst_string exch def }
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex  get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string  dst_index 2 index putinterval
						length dst_index add /dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string  dst_index 2 index putinterval
						pop dup dst_index add /dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							  { arrayIndex get }
							  {
							  pop
							  exit
							  }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			} bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{ /unknowninstancename /Category resourcestatus }
			stopped
				{ cleartomark setglobal true }
				{ cleartomark currentglobal not exch setglobal }
			ifelse
				{
					{
					mark 3 1 roll /Category findresource
						begin
						ct_Vars /vm currentglobal put
						({ResourceStatus} stopped) 0 () /SubFileDecode filter cvx exec
							{ cleartomark false }
							{ { 3 2 roll pop true } { cleartomark false } ifelse }
						ifelse
						ct_Vars /vm get setglobal
						end
					}
				}
				{ { resourcestatus } }
			ifelse bind def
			/CIDFont /Category ct_resourcestatus
				{ pop pop }
				{
				currentglobal  true setglobal
				/Generic /Category findresource
				dup length dict copy
				dup /InstanceType /dicttype put
				/CIDFont exch /Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit /ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				  /Registry (Adobe) def
				  /Ordering (Identity) def
				  /Supplement 0 def
				end def
				/CMapName /Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000> <FFFF>
				endcodespacerange
				1 begincidrange
				<0000> <FFFF> 0
				endcidrange
				endcmap
				CMapName currentdict /CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont  10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{ pop pop /defineresource /undefined ct_raise }
				ifelse
				} bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{ get 3 1 roll pop pop}
						{ pop pop /findresource /undefinedresource ct_raise }
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{ pop pop /findresource /undefined ct_raise }
				ifelse
				} bind def
			/ct_resourcestatus /resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup (Binary) eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{ cid_BYTE_COUNT () /SubFileDecode filter }
							stopped
								{ pop pop pop }
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup (Hex) eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{ null exch /ASCIIHexDecode filter /readstring }
							stopped
								{ pop exch pop (>) exch /readhexstring }
							if
							}
							{ (>) exch /readhexstring }
						ifelse
						load
						exit
						}
					if
					/StartData /typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch /GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop /readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				} bind def
			/StartData
				{
				mark
					{
					currentdict
					dup /FDArray get 0 get /FontMatrix get
					0 get 0.001 eq
						{
						dup /CDevProc known not
							{
							/CDevProc 1183615869 internaldict /stdCDevProc 2 copy known
								{ get }
								{
								pop pop
								{ pop pop pop pop pop 0 -1000 7 index 2 div 880 }
								}
							ifelse
							def
							}
						if
						}
						{
						 /CDevProc
							 {
							 pop pop pop pop pop
							 0
							 1 cid_temp /cid_CIDFONT get
							 /FDArray get 0 get
							 /FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							 } def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup /cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup /SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup /SubrMapOffset undef
										dup /SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{ pop }
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict /CIDFont defineresource pop
					end end
					}
				stopped
					{ cleartomark /StartData ct_reraise }
				if
				} bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit /ProcSet ct_resourcestatus
				{ true }
				{ /CIDInitC /ProcSet ct_resourcestatus }
			ifelse
				{
				pop pop
				/CIDInit /ProcSet findresource
				ct_UseNativeCapability?
					{ pop null }
					{ /CIDInit ct_CIDInit /ProcSet defineresource pop }
				ifelse
				}
				{ /CIDInit ct_CIDInit /ProcSet defineresource pop null }
			ifelse
			ct_Vars exch /ct_oldCIDInit exch put
			} bind def
		/ct_restoreCIDInit
			{
			ct_Vars /ct_oldCIDInit get dup null ne
				{ /CIDInit exch /ProcSet defineresource pop }
				{ pop }
			ifelse
			} bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility /ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{ pop 0 }
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{ get }
								{ pop pop nullstring }
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{ 0 FDBytes ct_cvnsi }
									{ pop 0 }
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{ /charstring nullstring def exit }
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			} def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			} def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont /Widths get cid
					2 copy known
						{ get exch pop aload pop }
						{ pop pop stringwidth }
					ifelse
					}
					{ stringwidth }
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			} def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{ get }
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup /FontMatrix 2 copy known
						{ get }
						{ pop pop ct_defaultFontMtx }
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont /Widths get def
					/CharStrings 1 dict dup /.notdef
						<d841272cf18f54fc13> dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup /CharStrings get 1 index /Encoding get
			ct_dfCharCode get charstring put
			rootfont /WMode 2 copy known
				{ get }
				{ pop pop 0 }
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ ct_str1 show }
			ifelse
			} def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup /FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ ct_1000Mtx matrix concatmatrix concat }
				{ pop }
			ifelse
			/Private get
			Adobe_CoolType_Utility /ct_Level2? get not
				{
				ct_dfDict /Private
				3 -1 roll
					{ put }
				1183615869 internaldict /superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility /ct_Level2? get
				{ 1 index }
				{ 3 index /Private get mark 6 1 roll }
			ifelse
			dup /RunInt known
				{ /RunInt get }
				{ pop /CCRun }
			ifelse
			get exec
			Adobe_CoolType_Utility /ct_Level2? get not
				{ cleartomark }
			if
			} bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility /ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{ stop }
			if
			end
			end
			end
			end
			} bind def
		/BaseFontNameStr (BF00) def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix  [0.001 0 0 0.001 0 0] def
			/FontBBox  [-250 -250 1250 1250] def
			/Encoding ct_cHexEncoding def
			/BuildChar /ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString /ct_Type3ShowCharString load def
				/ct_dfSetCacheProc /ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup /lenIV 4 put def
				/CharStrings 1 dict dup /.notdef <d841272cf18f54fc13> put def
				/PaintType 0 def
				/ct_ShowCharString /ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{ exit }
				if
				}
			for
			exch pop exch pop
			} bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch /WMode exch def
				exch /FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup /FontMatrix known
				{ dup /FontMatrix get /FontMatrix exch def }
				{ /FontMatrix matrix def }
			ifelse
				/bfCount 1 index /CIDCount get 256 idiv 1 add
					dup 256 gt { pop 256} if def
				/Encoding
					256 array 0 1 bfCount 1 sub { 2 copy dup put pop } for
					bfCount 1 255 { 2 copy bfCount put pop } for
					def
				/FDepVector bfCount dup 256 lt { 1 add } if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont /FontBBox known
						{ CIDFont /FontBBox get /FontBBox exch def }
					if
					CIDFont /CDevProc known
						{ CIDFont /CDevProc get /CDevProc exch def }
					if
					currentdict
					end
				BaseFontNameStr 3 (0) putinterval
				0 1 bfCount dup 256 eq { 1 sub } if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup /CIDFirstByte exch 256 mul def
						FontType 3 eq
							{ /ct_FDDict 2 dict def }
						if
						currentdict
						end
					1 index  16
					BaseFontNameStr  2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{ /Widths 1 index /CIDFont get /GlyphDirectory get length dict def }
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont /Widths get
						begin
						exch /CIDFont get /GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{ exch pop }
			ifelse
			} bind def
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{
				2 index /CMap ct_resourcestatus
					{ pop pop exch pop }
					{
					/CIDInit /ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch /WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry (Adobe) def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-) search
									{
									pop pop
									(-) search
										{
										dup length string copy
										exch pop exch pop
										}
										{ pop (Identity)}
									ifelse
									}
									{ pop  (Identity)  }
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000> <FFFF>
							endcodespacerange
							1 begincidrange
							<0000> <FFFF> 0
							endcidrange
							endcmap
							CMapName currentdict /CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index /CMap ct_resourcestatus
					{ pop pop }
					{
					/CIDInit /ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry (Adobe) def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-) search
							{
							pop pop
							(-) search
								{ dup length string copy exch pop exch pop }
								{ pop (Identity) }
							ifelse
							}
							{ pop (Identity) }
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000> <FFFF>
					endcodespacerange
					1 begincidrange
					<0000> <FFFF> 0
					endcidrange
					endcmap
					CMapName currentdict /CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get /CIDFont findresource
				ct_makeocf
				}
			ifelse
			} bind def
		currentdict readonly pop
		end
	end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev3 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 3
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/_processColors
currentpagedevice /ProcessColorModel getifknown
{ << /DeviceGray [/Gray]
/DeviceRGB [/Red /Green /Blue]
/DeviceCMYK [/Cyan /Magenta /Yellow /Black]
/DeviceCMY [/Cyan /Magenta /Yellow]
/DeviceRGBK [/Red /Green /Blue /Black]
>> exch getifknown {} {[]} ifelse }
{[]}
ifelse
def
/initialize {
PDFVars /docSetupDone get
{
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
}if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/rssds
{
/Shading get /DataSource get resetfile
} bd
/sh
{ dup /DataSource known
{ dup begin
DataSource type /filetype eq { DataSource resetfile } if
end
} if
shfill
} [/DataSource] bld
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri {
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/CMYKDeviceNColorspaces [
[/Separation /None /DeviceCMYK {0 0 0}] bind
[/Separation (Black)
/DeviceCMYK {0 0 0 4 -1 roll}] bind
[/Separation (Yellow)
/DeviceCMYK {0 0 3 -1 roll 0}] bind
[/DeviceN [(Yellow) (Black)]
/DeviceCMYK {0 0 4 2 roll}] bind
[/Separation (Magenta)
/DeviceCMYK {0 exch 0 0}] bind
[/DeviceN [(Magenta) (Black)]
/DeviceCMYK {0 3 1 roll 0 exch}] bind
[/DeviceN [(Magenta) (Yellow)]
/DeviceCMYK {0 3 1 roll 0}] bind
[/DeviceN [(Magenta) (Yellow) (Black)]
/DeviceCMYK {0 4 1 roll}] bind
[/Separation (Cyan)
/DeviceCMYK {0 0 0}] bind
[/DeviceN [(Cyan) (Black)]
/DeviceCMYK {0 0 3 -1 roll}] bind
[/DeviceN [(Cyan) (Yellow)]
/DeviceCMYK {0 exch 0}] bind
[/DeviceN [(Cyan) (Yellow) (Black)]
/DeviceCMYK {0 3 1 roll}] bind
[/DeviceN [(Cyan) (Magenta)]
/DeviceCMYK {0 0}] bind
[/DeviceN [(Cyan) (Magenta) (Black)]
/DeviceCMYK {0 exch}] bind
[/DeviceN [(Cyan) (Magenta) (Yellow)]
/DeviceCMYK {0}] bind
[/DeviceCMYK] bind
] def
/nzopmsc {
6 dict begin
/kk exch def
/yy exch def
/mm exch def
/cc exch def
/sum 0 def
cc 0 ne {/sum sum 2#1000 or def cc} if
mm 0 ne {/sum sum 2#0100 or def mm} if
yy 0 ne {/sum sum 2#0010 or def yy} if
kk 0 ne {/sum sum 2#0001 or def kk} if
CMYKDeviceNColorspaces sum get setcolorspace
sum 0 eq {0} if
end
setcolor
} [/cc /mm /yy /kk /sum] bld
/every? {
true
3 2 roll
{ 2 index exec not {pop false exit} if } forall
exch pop
} bd
/knownColorants? {
3 dict begin
/colorants exch def
{
/DeviceN /ColorSpaceFamily findresource pop
/cpd currentpagedevice def
/dc 10 dict def
cpd /SeparationColorNames getifknown
{ { dc exch 0 put } forall } if
_processColors { dc exch 0 put } forall
colorants {dc exch known} every?
} stopped
{ false }
if
end
} [/colorants /dc /cpd] bld
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica-Bold
[/N11/Helvetica-Bold 1 TZ

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 1231 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<?adobe-xap-filters esc="CRLF"?>
<x:xmpmeta xmlns:x='adobe:ns:meta/' x:xmptk='XMP toolkit 2.9.1-14, framework 1.6'>
<rdf:RDF xmlns:rdf='http://www.w3.org/1999/02/22-rdf-syntax-ns#' xmlns:iX='http://ns.adobe.com/iX/1.0/'>
<rdf:Description rdf:about='uuid:b537fb69-7659-4273-a0ee-fe5d84eacf71' xmlns:pdf='http://ns.adobe.com/pdf/1.3/' pdf:Producer='Acrobat Distiller 6.0.1 (Windows)'></rdf:Description>
<rdf:Description rdf:about='uuid:b537fb69-7659-4273-a0ee-fe5d84eacf71' xmlns:xap='http://ns.adobe.com/xap/1.0/' xap:CreatorTool='ROOT Version 4.01/02' xap:ModifyDate='2006-07-19T20:49:06-04:00' xap:CreateDate='2006-07-19T20:47:52-04:00' xap:MetadataDate='2006-07-19T20:49:06-04:00'></rdf:Description>
<rdf:Description rdf:about='uuid:b537fb69-7659-4273-a0ee-fe5d84eacf71' xmlns:xapMM='http://ns.adobe.com/xap/1.0/mm/' xapMM:DocumentID='uuid:6c489ebd-89bd-45de-b661-f27b16b49ec2'/>
<rdf:Description rdf:about='uuid:b537fb69-7659-4273-a0ee-fe5d84eacf71' xmlns:dc='http://purl.org/dc/elements/1.1/' dc:format='application/pdf'><dc:title><rdf:Alt><rdf:li xml:lang='x-default'>/direct/phenix+data07/missah/analysis/study/plotsfinal/v2qvsKETq.eps: canvas</rdf:li></rdf:Alt></dc:title></rdf:Description>
</rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
9 13 527 364 rectclip
/N12 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

8.695602 12.980743 526.627151 363.584625 re
W
n
0.02 setsmoothness
n
0.059998 0.059998 566.940002 406.690002 re
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E1 exch /ColorSpace defineRes

cs 1.0 1.0 1.0 sc
f
n
0.059998 0.059998 289.190002 398.690002 re
f
n
72.25 59.75 217.0 311.0 re
f
0.75 w
n
289.25 59.75 -217.0 311.0 re
72.25 59.75 m
h
[/DeviceGray] cs 0.0 sc
S
n
72.25 59.75 217.0 311.0 re
/E1 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
289.25 59.75 -217.0 311.0 re
72.25 59.75 m
h
72.25 59.75 m
289.25 59.75 l
72.25 59.75 m
289.25 59.75 l
[/DeviceGray] cs 0.0 sc
S
168.5 25.75 m
/N11 16.574493 Tf
( \(GeV/c\))
[4.607707 5.519183 12.894954 9.215414 11.05531 4.607707 9.215414 5.519183 ] pdfxs
162.0 20.25 m
/N11 11.049698 Tf
(q) show
147.25 25.75 m
/N11 16.574493 Tf
(/n)
[4.607707 10.12689 ] pdfxs
140.0 20.25 m
/N11 11.049698 Tf
(T) show
129.75 25.75 m
/N11 16.574493 Tf
(p) show
n
81.75 68.75 m
81.75 59.75 l
91.25 64.25 m
91.25 59.75 l
100.5 64.25 m
100.5 59.75 l
110.0 64.25 m
110.0 59.75 l
119.5 64.25 m
119.5 59.75 l
128.75 68.75 m
128.75 59.75 l
138.25 64.25 m
138.25 59.75 l
147.75 64.25 m
147.75 59.75 l
157.25 64.25 m
157.25 59.75 l
166.5 64.25 m
166.5 59.75 l
176.0 68.75 m
176.0 59.75 l
185.5 64.25 m
185.5 59.75 l
194.75 64.25 m
194.75 59.75 l
204.25 64.25 m
204.25 59.75 l
213.75 64.25 m
213.75 59.75 l
223.25 68.75 m
223.25 59.75 l
232.5 64.25 m
232.5 59.75 l
242.0 64.25 m
242.0 59.75 l
251.5 64.25 m
251.5 59.75 l
260.75 64.25 m
260.75 59.75 l
270.25 68.75 m
270.25 59.75 l
81.75 68.75 m
81.75 59.75 l
270.25 68.75 m
270.25 59.75 l
279.75 64.25 m
279.75 59.75 l
289.25 64.25 m
289.25 59.75 l
S
76.5 45.0 m
(00.511.52)
[40.499771 9.215414 4.607707 41.17601 38.749504 9.215414 4.607707 40.426842 9.215414 ] pdfxs
n
72.25 370.75 m
289.25 370.75 l
81.75 361.75 m
81.75 370.75 l
91.25 366.25 m
91.25 370.75 l
100.5 366.25 m
100.5 370.75 l
110.0 366.25 m
110.0 370.75 l
119.5 366.25 m
119.5 370.75 l
128.75 361.75 m
128.75 370.75 l
138.25 366.25 m
138.25 370.75 l
147.75 366.25 m
147.75 370.75 l
157.25 366.25 m
157.25 370.75 l
166.5 366.25 m
166.5 370.75 l
176.0 361.75 m
176.0 370.75 l
185.5 366.25 m
185.5 370.75 l
194.75 366.25 m
194.75 370.75 l
204.25 366.25 m
204.25 370.75 l
213.75 366.25 m
213.75 370.75 l
223.25 361.75 m
223.25 370.75 l
232.5 366.25 m
232.5 370.75 l
242.0 366.25 m
242.0 370.75 l
251.5 366.25 m
251.5 370.75 l
260.75 366.25 m
260.75 370.75 l
270.25 361.75 m
270.25 370.75 l
81.75 361.75 m
81.75 370.75 l
270.25 361.75 m
270.25 370.75 l
279.75 366.25 m
279.75 370.75 l
289.25 366.25 m
289.25 370.75 l
72.25 59.75 m
72.25 370.75 l
S
31.25 230.0 m
/N11 [0.0 12.891296 -12.891296 0.0 0.0 0.0] Tf
(q) show
25.75 212.5 m
/N11 [0.0 19.337006 -19.337006 0.0 0.0 0.0] Tf
(/n)
[5.375685 11.814764 ] pdfys
31.25 205.25 m
/N11 [0.0 12.891296 -12.891296 0.0 0.0 0.0] Tf
(2) show
25.75 194.25 m
/N11 [0.0 19.337006 -19.337006 0.0 0.0 0.0] Tf
(v) show
n
79.0 59.75 m
72.25 59.75 l
75.75 85.75 m
72.25 85.75 l
75.75 111.5 m
72.25 111.5 l
75.75 137.5 m
72.25 137.5 l
75.75 163.5 m
72.25 163.5 l
79.0 189.25 m
72.25 189.25 l
75.75 215.25 m
72.25 215.25 l
75.75 241.25 m
72.25 241.25 l
75.75 267.0 m
72.25 267.0 l
75.75 293.0 m
72.25 293.0 l
79.0 319.0 m
72.25 319.0 l
79.0 319.0 m
72.25 319.0 l
75.75 344.75 m
72.25 344.75 l
S
59.75 55.25 m
/N11 16.574493 Tf
(0) show
36.749573 185.000153 m
(0.05)
[9.215414 4.607707 9.215414 9.215414 ] pdfxs
47.750061 314.750305 m
(0.1)
[9.215414 4.607707 9.215414 ] pdfxs
n
289.25 59.75 m
289.25 370.75 l
282.25 59.75 m
289.25 59.75 l
285.75 85.75 m
289.25 85.75 l
285.75 111.5 m
289.25 111.5 l
285.75 137.5 m
289.25 137.5 l
285.75 163.5 m
289.25 163.5 l
282.25 189.25 m
289.25 189.25 l
285.75 215.25 m
289.25 215.25 l
285.75 241.25 m
289.25 241.25 l
285.75 267.0 m
289.25 267.0 l
285.75 293.0 m
289.25 293.0 l
282.25 319.0 m
289.25 319.0 l
282.25 319.0 m
289.25 319.0 l
285.75 344.75 m
289.25 344.75 l
S
n
232.25 247.25 m
232.25 250.75 l
232.25 239.75 m
232.25 236.0 l
/E1 /ColorSpace findRes cs 1.0 0.0 0.0 sc
S
n
236.13501 243.479996 m
236.13501 245.619019 234.399017 247.355011 232.259995 247.355011 c
230.121017 247.355011 228.38501 245.619019 228.38501 243.479996 c
228.38501 241.341019 230.121017 239.605011 232.259995 239.605011 c
234.399017 239.605011 236.13501 241.341019 236.13501 243.479996 c
eofill
n
212.13501 259.259979 m
212.13501 261.399017 210.399017 263.13501 208.259995 263.13501 c
206.121002 263.13501 204.38501 261.399017 204.38501 259.259979 c
204.38501 257.121002 206.121002 255.38501 208.259995 255.38501 c
210.399017 255.38501 212.13501 257.121002 212.13501 259.259979 c
eofill
n
188.615005 256.259979 m
188.615005 258.399017 186.879013 260.13501 184.73999 260.13501 c
182.601013 260.13501 180.865005 258.399017 180.865005 256.259979 c
180.865005 254.121017 182.601013 252.38501 184.73999 252.38501 c
186.879013 252.38501 188.615005 254.121017 188.615005 256.259979 c
eofill
n
174.875015 249.0 m
174.875015 251.139008 173.139008 252.875015 171.0 252.875015 c
168.861008 252.875015 167.125015 251.139008 167.125015 249.0 c
167.125015 246.861008 168.861008 245.125015 171.0 245.125015 c
173.139008 245.125015 174.875015 246.861008 174.875015 249.0 c
eofill
n
165.395004 239.519989 m
165.395004 241.659012 163.659012 243.395004 161.519989 243.395004 c
159.381012 243.395004 157.645004 241.659012 157.645004 239.519989 c
157.645004 237.381012 159.381012 235.645004 161.519989 235.645004 c
163.659012 235.645004 165.395004 237.381012 165.395004 239.519989 c
eofill
n
155.615005 227.759995 m
155.615005 229.899017 153.879013 231.63501 151.73999 231.63501 c
149.601013 231.63501 147.865005 229.899017 147.865005 227.759995 c
147.865005 225.621017 149.601013 223.88501 151.73999 223.88501 c
153.879013 223.88501 155.615005 225.621017 155.615005 227.759995 c
eofill
n
145.895004 213.479996 m
145.895004 215.619003 144.159012 217.355011 142.020004 217.355011 c
139.881012 217.355011 138.145004 215.619003 138.145004 213.479996 c
138.145004 211.341003 139.881012 209.605011 142.020004 209.605011 c
144.159012 209.605011 145.895004 211.341003 145.895004 213.479996 c
eofill
n
136.895004 196.73999 m
136.895004 198.879013 135.159012 200.615005 133.020004 200.615005 c
130.881012 200.615005 129.145004 198.879013 129.145004 196.73999 c
129.145004 194.601013 130.881012 192.865005 133.020004 192.865005 c
135.159012 192.865005 136.895004 194.601013 136.895004 196.73999 c
eofill
n
130.355011 181.73999 m
130.355011 183.879013 128.619003 185.615005 126.479996 185.615005 c
124.341003 185.615005 122.605003 183.879013 122.605003 181.73999 c
122.605003 179.601013 124.341003 177.865005 126.479996 177.865005 c
128.619003 177.865005 130.355011 179.601013 130.355011 181.73999 c
eofill
n
125.615005 169.979996 m
125.615005 172.119003 123.879005 173.855011 121.739998 173.855011 c
119.601006 173.855011 117.865005 172.119003 117.865005 169.979996 c
117.865005 167.841003 119.601006 166.105011 121.739998 166.105011 c
123.879005 166.105011 125.615005 167.841003 125.615005 169.979996 c
eofill
n
120.875008 158.519989 m
120.875008 160.659012 119.139008 162.395004 117.0 162.395004 c
114.861008 162.395004 113.125008 160.659012 113.125008 158.519989 c
113.125008 156.381012 114.861008 154.645004 117.0 154.645004 c
119.139008 154.645004 120.875008 156.381012 120.875008 158.519989 c
eofill
n
116.135002 145.259995 m
116.135002 147.399002 114.399002 149.13501 112.259995 149.13501 c
110.121002 149.13501 108.385002 147.399002 108.385002 145.259995 c
108.385002 143.121002 110.121002 141.38501 112.259995 141.38501 c
114.399002 141.38501 116.135002 143.121002 116.135002 145.259995 c
eofill
n
111.395004 132.23999 m
111.395004 134.379013 109.659004 136.115005 107.519997 136.115005 c
105.381004 136.115005 103.645004 134.379013 103.645004 132.23999 c
103.645004 130.101013 105.381004 128.365005 107.519997 128.365005 c
109.659004 128.365005 111.395004 130.101013 111.395004 132.23999 c
eofill
n
106.655006 117.479996 m
106.655006 119.619003 104.919006 121.355003 102.779999 121.355003 c
100.641006 121.355003 98.905006 119.619003 98.905006 117.479996 c
98.905006 115.341003 100.641006 113.605003 102.779999 113.605003 c
104.919006 113.605003 106.655006 115.341003 106.655006 117.479996 c
eofill
n
102.095001 103.019997 m
102.095001 105.159004 100.359001 106.895004 98.220001 106.895004 c
96.081001 106.895004 94.345001 105.159004 94.345001 103.019997 c
94.345001 100.881004 96.081001 99.145004 98.220001 99.145004 c
100.359001 99.145004 102.095001 100.881004 102.095001 103.019997 c
eofill
n
97.355003 89.519997 m
97.355003 91.659004 95.619003 93.395004 93.479996 93.395004 c
91.341003 93.395004 89.605003 91.659004 89.605003 89.519997 c
89.605003 87.381004 91.341003 85.645004 93.479996 85.645004 c
95.619003 85.645004 97.355003 87.381004 97.355003 89.519997 c
eofill
n
208.5 258.5 m
208.5 259.5 l
208.5 251.25 m
208.5 250.25 l
232.25 261.0 m
232.25 267.25 l
232.25 253.5 m
232.25 247.5 l
0.0 0.0 1.0 sc
S
n
232.25 261.125 m
228.375015 261.125 l
228.375015 253.375015 l
236.125015 253.375015 l
236.125015 261.125 l
eofill
n
208.5 258.875 m
204.625015 258.875 l
204.625015 251.125015 l
212.375015 251.125015 l
212.375015 258.875 l
eofill
n
185.0 248.375015 m
181.125015 248.375015 l
181.125015 240.625015 l
188.875015 240.625015 l
188.875015 248.375015 l
eofill
n
171.0 235.125015 m
167.125015 235.125015 l
167.125015 227.375015 l
174.875015 227.375015 l
174.875015 235.125015 l
eofill
n
161.5 230.625015 m
157.625 230.625015 l
157.625 222.875015 l
165.375015 222.875015 l
165.375015 230.625015 l
eofill
n
151.75 218.375015 m
147.875 218.375015 l
147.875 210.625015 l
155.625 210.625015 l
155.625 218.375015 l
eofill
n
142.25 201.375015 m
138.375 201.375015 l
138.375 193.625015 l
146.125 193.625015 l
146.125 201.375015 l
eofill
n
133.0 180.125015 m
129.125 180.125015 l
129.125 172.375015 l
136.875 172.375015 l
136.875 180.125015 l
eofill
n
126.5 163.875015 m
122.625008 163.875015 l
122.625008 156.125 l
130.375 156.125 l
130.375 163.875015 l
eofill
n
121.75 149.375 m
117.875008 149.375 l
117.875008 141.625 l
125.625008 141.625 l
125.625008 149.375 l
eofill
n
117.0 136.375 m
113.125008 136.375 l
113.125008 128.625 l
120.875008 128.625 l
120.875008 136.375 l
eofill
n
112.25 123.125008 m
108.375008 123.125008 l
108.375008 115.375008 l
116.125008 115.375008 l
116.125008 123.125008 l
eofill
n
107.75 108.875008 m
103.875008 108.875008 l
103.875008 101.125008 l
111.625008 101.125008 l
111.625008 108.875008 l
eofill
n
103.0 97.875008 m
99.125008 97.875008 l
99.125008 90.125008 l
106.875008 90.125008 l
106.875008 97.875008 l
eofill
n
97.25 73.25 m
97.25 81.5 l
97.25 68.5 m
97.25 60.25 l
106.0 89.75 m
106.0 92.0 l
106.0 85.25 m
106.0 83.0 l
115.0 123.0 m
115.0 124.0 l
115.0 118.5 m
115.0 117.5 l
124.0 148.0 m
124.0 148.75 l
124.0 143.5 m
124.0 142.75 l
133.5 175.75 m
133.5 176.75 l
133.5 171.25 m
133.5 170.25 l
142.75 198.0 m
142.75 199.25 l
142.75 193.25 m
142.75 192.0 l
152.25 213.25 m
152.25 215.25 l
152.25 208.5 m
152.25 206.5 l
161.5 229.75 m
161.5 233.0 l
161.5 225.25 m
161.5 222.25 l
171.0 236.75 m
171.0 241.25 l
171.0 232.25 m
171.0 227.75 l
184.0 245.0 m
184.0 250.25 l
184.0 240.5 m
184.0 235.25 l
202.0 253.5 m
202.0 262.5 l
202.0 248.75 m
202.0 239.5 l
220.25 241.0 m
220.25 259.5 l
220.25 236.25 m
220.25 217.75 l
239.75 257.5 m
239.75 285.0 l
239.75 253.0 m
239.75 225.5 l
264.5 259.0 m
264.5 283.75 l
264.5 254.25 m
264.5 229.5 l
0.34902 0.83137 0.32941 sc
S
n
259.875 258.292023 m
269.125 258.292023 l
261.641998 252.855011 l
264.5 261.652008 l
267.358002 252.855011 l
f
n
235.125015 256.792023 m
244.375015 256.792023 l
236.892014 251.355011 l
239.75 260.152008 l
242.608017 251.355011 l
f
n
215.625015 240.292007 m
224.875015 240.292007 l
217.392014 234.855011 l
220.25 243.652008 l
223.108017 234.855011 l
f
n
197.375015 252.542007 m
206.625015 252.542007 l
199.142014 247.105011 l
202.0 255.902008 l
204.858017 247.105011 l
f
n
179.375015 244.292007 m
188.625015 244.292007 l
181.142014 238.855011 l
184.0 247.652008 l
186.858002 238.855011 l
f
n
166.375015 236.042007 m
175.625015 236.042007 l
168.142014 230.605011 l
171.0 239.402008 l
173.858002 230.605011 l
f
n
156.875 229.042007 m
166.125015 229.042007 l
158.642014 223.605011 l
161.5 232.402008 l
164.358002 223.605011 l
f
n
147.625 212.542007 m
156.875 212.542007 l
149.392014 207.105011 l
152.25 215.902008 l
155.108002 207.105011 l
f
n
138.125 197.292007 m
147.375 197.292007 l
139.892014 191.855011 l
142.75 200.652008 l
145.608002 191.855011 l
f
n
128.875 175.042007 m
138.125 175.042007 l
130.642014 169.605011 l
133.5 178.402008 l
136.358002 169.605011 l
f
n
119.375008 147.292007 m
128.625 147.292007 l
121.142006 141.855011 l
124.0 150.652008 l
126.858009 141.855011 l
f
n
110.375008 122.292007 m
119.625008 122.292007 l
112.142006 116.855003 l
115.0 125.652008 l
117.858009 116.855003 l
f
n
101.375008 89.042007 m
110.625008 89.042007 l
103.142006 83.605003 l
106.0 92.402008 l
108.858002 83.605003 l
f
n
92.625008 72.542 m
101.875008 72.542 l
94.392006 67.105003 l
97.25 75.902 l
100.108002 67.105003 l
f
n
177.875015 233.208008 m
180.958008 233.208008 l
180.958008 230.125015 l
184.042007 230.125015 l
184.042007 233.208008 l
187.125015 233.208008 l
187.125015 236.292007 l
184.042007 236.292007 l
184.042007 239.375015 l
180.958008 239.375015 l
180.958008 236.292007 l
177.875015 236.292007 l
h
162.125015 221.458008 m
165.208008 221.458008 l
165.208008 218.375015 l
168.292007 218.375015 l
168.292007 221.458008 l
171.375015 221.458008 l
171.375015 224.542007 l
168.292007 224.542007 l
168.292007 227.625015 l
165.208008 227.625015 l
165.208008 224.542007 l
162.125015 224.542007 l
h
146.375 199.958008 m
149.458008 199.958008 l
149.458008 196.875015 l
152.542007 196.875015 l
152.542007 199.958008 l
155.625 199.958008 l
155.625 203.042007 l
152.542007 203.042007 l
152.542007 206.125015 l
149.458008 206.125015 l
149.458008 203.042007 l
146.375 203.042007 l
h
136.625 184.208008 m
139.708008 184.208008 l
139.708008 181.125015 l
142.792007 181.125015 l
142.792007 184.208008 l
145.875 184.208008 l
145.875 187.292007 l
142.792007 187.292007 l
142.792007 190.375015 l
139.708008 190.375015 l
139.708008 187.292007 l
136.625 187.292007 l
h
130.375 170.208008 m
133.458008 170.208008 l
133.458008 167.125015 l
136.542007 167.125015 l
136.542007 170.208008 l
139.625 170.208008 l
139.625 173.292007 l
136.542007 173.292007 l
136.542007 176.375015 l
133.458008 176.375015 l
133.458008 173.292007 l
130.375 173.292007 l
h
123.875008 152.208008 m
126.958008 152.208008 l
126.958008 149.125 l
130.042007 149.125 l
130.042007 152.208008 l
133.125 152.208008 l
133.125 155.292007 l
130.042007 155.292007 l
130.042007 158.375 l
126.958008 158.375 l
126.958008 155.292007 l
123.875008 155.292007 l
h
117.375008 136.958008 m
120.458008 136.958008 l
120.458008 133.875 l
123.542007 133.875 l
123.542007 136.958008 l
126.625008 136.958008 l
126.625008 140.042007 l
123.542007 140.042007 l
123.542007 143.125 l
120.458008 143.125 l
120.458008 140.042007 l
117.375008 140.042007 l
h
111.375008 117.458008 m
114.458008 117.458008 l
114.458008 114.375008 l
117.542007 114.375008 l
117.542007 117.458008 l
120.625008 117.458008 l
120.625008 120.542007 l
117.542007 120.542007 l
117.542007 123.625008 l
114.458008 123.625008 l
114.458008 120.542007 l
111.375008 120.542007 l
h
106.875008 103.458008 m
109.958008 103.458008 l
109.958008 100.375008 l
113.042007 100.375008 l
113.042007 103.458008 l
116.125008 103.458008 l
116.125008 106.542007 l
113.042007 106.542007 l
113.042007 109.625008 l
109.958008 109.625008 l
109.958008 106.542007 l
106.875008 106.542007 l
h
103.875008 94.708008 m
106.958008 94.708008 l
106.958008 91.625008 l
110.042007 91.625008 l
110.042007 94.708008 l
113.125008 94.708008 l
113.125008 97.792007 l
110.042007 97.792007 l
110.042007 100.875008 l
106.958008 100.875008 l
106.958008 97.792007 l
103.875008 97.792007 l
h
100.625008 86.458008 m
103.708008 86.458008 l
103.708008 83.375008 l
106.792007 83.375008 l
106.792007 86.458008 l
109.875008 86.458008 l
109.875008 89.542007 l
106.792007 89.542007 l
106.792007 92.625008 l
103.708008 92.625008 l
103.708008 89.542007 l
100.625008 89.542007 l
h
97.625008 78.708 m
100.708008 78.708 l
100.708008 75.625 l
103.792007 75.625 l
103.792007 78.708 l
106.875008 78.708 l
106.875008 81.792007 l
103.792007 81.792007 l
103.792007 84.875008 l
100.708008 84.875008 l
100.708008 81.792007 l
97.625008 81.792007 l
h
1.0 0.0 1.0 sc
S
n
104.25 80.0 m
104.25 81.0 l
104.25 72.75 m
104.25 72.0 l
147.5 199.25 m
147.5 192.0 m
153.75 207.75 m
153.75 208.25 l
153.75 200.25 m
153.75 199.75 l
162.5 221.5 m
162.5 222.0 l
162.5 214.25 m
162.5 213.75 l
175.25 234.5 m
175.25 236.75 l
175.25 227.0 m
175.25 224.75 l
187.75 256.75 m
187.75 262.75 l
187.75 249.25 m
187.75 243.25 l
204.0 246.5 m
204.0 255.75 l
204.0 239.0 m
204.0 229.75 l
207.875015 242.759995 m
207.875015 244.899017 206.139008 246.63501 204.0 246.63501 c
201.861008 246.63501 200.125015 244.899017 200.125015 242.759995 c
200.125015 240.621017 201.861008 238.88501 204.0 238.88501 c
206.139008 238.88501 207.875015 240.621017 207.875015 242.759995 c
191.615005 253.019989 m
191.615005 255.159012 189.879013 256.89502 187.73999 256.89502 c
185.601013 256.89502 183.865005 255.159012 183.865005 253.019989 c
183.865005 250.881012 185.601013 249.145004 187.73999 249.145004 c
189.879013 249.145004 191.615005 250.881012 191.615005 253.019989 c
179.13501 230.759995 m
179.13501 232.899017 177.399002 234.63501 175.259995 234.63501 c
173.121002 234.63501 171.38501 232.899017 171.38501 230.759995 c
171.38501 228.621017 173.121002 226.88501 175.259995 226.88501 c
177.399002 226.88501 179.13501 228.621017 179.13501 230.759995 c
166.355011 217.73999 m
166.355011 219.879013 164.619003 221.615005 162.479996 221.615005 c
160.341003 221.615005 158.605011 219.879013 158.605011 217.73999 c
158.605011 215.601013 160.341003 213.865005 162.479996 213.865005 c
164.619003 213.865005 166.355011 215.601013 166.355011 217.73999 c
157.655014 204.0 m
157.655014 206.139008 155.919006 207.875015 153.779999 207.875015 c
151.641006 207.875015 149.905014 206.139008 149.905014 204.0 c
149.905014 201.861008 151.641006 200.125015 153.779999 200.125015 c
155.919006 200.125015 157.655014 201.861008 157.655014 204.0 c
151.355011 195.779999 m
151.355011 197.919006 149.619003 199.655014 147.479996 199.655014 c
145.341003 199.655014 143.605011 197.919006 143.605011 195.779999 c
143.605011 193.641006 145.341003 191.905014 147.479996 191.905014 c
149.619003 191.905014 151.355011 193.641006 151.355011 195.779999 c
145.115005 182.759995 m
145.115005 184.899002 143.379013 186.63501 141.23999 186.63501 c
139.101013 186.63501 137.365005 184.899002 137.365005 182.759995 c
137.365005 180.621002 139.101013 178.88501 141.23999 178.88501 c
143.379013 178.88501 145.115005 180.621002 145.115005 182.759995 c
138.875 162.479996 m
138.875 164.619003 137.139008 166.355011 135.0 166.355011 c
132.861008 166.355011 131.125 164.619003 131.125 162.479996 c
131.125 160.341003 132.861008 158.605011 135.0 158.605011 c
137.139008 158.605011 138.875 160.341003 138.875 162.479996 c
132.63501 148.5 m
132.63501 150.639008 130.899002 152.375 128.759995 152.375 c
126.62101 152.375 124.885002 150.639008 124.885002 148.5 c
124.885002 146.361008 126.62101 144.625 128.759995 144.625 c
130.899002 144.625 132.63501 146.361008 132.63501 148.5 c
126.395004 127.259995 m
126.395004 129.399002 124.659004 131.13501 122.519997 131.13501 c
120.381004 131.13501 118.645004 129.399002 118.645004 127.259995 c
118.645004 125.121002 120.381004 123.385002 122.519997 123.385002 c
124.659004 123.385002 126.395004 125.121002 126.395004 127.259995 c
120.095009 110.759995 m
120.095009 112.899002 118.359009 114.635002 116.219994 114.635002 c
114.081009 114.635002 112.345009 112.899002 112.345009 110.759995 c
112.345009 108.621002 114.081009 106.885002 116.219994 106.885002 c
118.359009 106.885002 120.095009 108.621002 120.095009 110.759995 c
114.095009 86.519997 m
114.095009 88.659004 112.359009 90.395004 110.220001 90.395004 c
108.081009 90.395004 106.345009 88.659004 106.345009 86.519997 c
106.345009 84.381004 108.081009 82.645004 110.220001 82.645004 c
112.359009 82.645004 114.095009 84.381004 114.095009 86.519997 c
108.095009 76.5 m
108.095009 78.639 106.359009 80.375008 104.220001 80.375008 c
102.081001 80.375008 100.345001 78.639 100.345001 76.5 c
100.345001 74.361 102.081001 72.625 104.220001 72.625 c
106.359009 72.625 108.095009 74.361 108.095009 76.5 c
[/DeviceGray] cs 0.0 sc
S
n
110.0 95.0 m
110.0 119.75 l
110.0 87.5 m
110.0 62.5 l
121.0 108.75 m
121.0 122.75 l
121.0 101.5 m
121.0 87.5 l
130.5 154.0 m
130.5 163.25 l
130.5 146.75 m
130.5 137.5 l
141.5 175.25 m
141.5 182.75 l
141.5 168.0 m
141.5 160.5 l
154.0 201.25 m
154.0 211.25 l
154.0 193.75 m
154.0 183.75 l
168.25 227.0 m
168.25 240.0 l
168.25 219.75 m
168.25 206.75 l
185.5 243.75 m
185.5 262.25 l
185.5 236.25 m
185.5 217.75 l
185.5 243.875015 m
181.625015 243.875015 l
181.625015 236.125015 l
189.375015 236.125015 l
189.375015 243.875015 l
h
168.25 227.375015 m
164.375015 227.375015 l
164.375015 219.625015 l
172.125015 219.625015 l
172.125015 227.375015 l
h
154.0 201.375015 m
150.125 201.375015 l
150.125 193.625015 l
157.875 193.625015 l
157.875 201.375015 l
h
141.5 175.625015 m
137.625 175.625015 l
137.625 167.875015 l
145.375 167.875015 l
145.375 175.625015 l
h
130.5 154.125 m
126.625008 154.125 l
126.625008 146.375 l
134.375 146.375 l
134.375 154.125 l
h
121.0 108.875008 m
117.125008 108.875008 l
117.125008 101.125008 l
124.875008 101.125008 l
124.875008 108.875008 l
h
110.0 95.125008 m
106.125008 95.125008 l
106.125008 87.375008 l
113.875008 87.375008 l
113.875008 95.125008 l
h
/E1 /ColorSpace findRes cs 0.52941 0.4 0.34118 sc
S
[/DeviceGray] cs 0.0 sc
83.75 345.25 m
/N11 15.653793 Tf
(\(a\))
[5.212596 8.703506 5.212596 ] pdfxs
n
289.25 0.059998 266.25 398.690002 re
/E1 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
289.25 59.75 229.0 311.0 re
f
n
518.25 59.75 -229.0 311.0 re
289.25 59.75 m
h
[/DeviceGray] cs 0.0 sc
S
n
289.25 59.75 229.0 311.0 re
/E1 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
518.25 59.75 -229.0 311.0 re
289.25 59.75 m
h
289.25 59.75 m
518.25 59.75 l
289.25 59.75 m
518.25 59.75 l
[/DeviceGray] cs 0.0 sc
S
404.0 24.75 m
/N11 15.673904 Tf
( \(GeV\))
[4.357344 5.219294 12.194296 8.714687 10.454611 5.219294 ] pdfxs
397.5 19.25 m
/N11 10.141907 Tf
(q) show
383.75 24.75 m
/N11 15.673904 Tf
(/n)
[4.357344 9.576637 ] pdfxs
377.25 20.25 m
/N11 10.141907 Tf
(T) show
356.25 24.75 m
/N11 15.673904 Tf
(KE)
[11.316561 10.454611 ] pdfxs
n
300.0 70.0 m
300.0 59.75 l
311.0 65.0 m
311.0 59.75 l
321.75 65.0 m
321.75 59.75 l
332.75 65.0 m
332.75 59.75 l
343.75 65.0 m
343.75 59.75 l
354.5 70.0 m
354.5 59.75 l
365.5 65.0 m
365.5 59.75 l
376.5 65.0 m
376.5 59.75 l
387.25 65.0 m
387.25 59.75 l
398.25 65.0 m
398.25 59.75 l
409.25 70.0 m
409.25 59.75 l
420.0 65.0 m
420.0 59.75 l
431.0 65.0 m
431.0 59.75 l
442.0 65.0 m
442.0 59.75 l
452.75 65.0 m
452.75 59.75 l
463.75 70.0 m
463.75 59.75 l
474.75 65.0 m
474.75 59.75 l
485.5 65.0 m
485.5 59.75 l
496.5 65.0 m
496.5 59.75 l
507.25 65.0 m
507.25 59.75 l
518.25 70.0 m
518.25 59.75 l
300.0 70.0 m
300.0 59.75 l
289.25 65.0 m
289.25 59.75 l
S
295.5 45.0 m
/N11 16.595901 Tf
(00.511.52)
[46.750648 9.227317 4.613658 48.908119 46.000515 9.227317 4.613658 48.65918 9.227317 ] pdfxs
n
289.25 370.75 m
518.25 370.75 l
300.0 360.5 m
300.0 370.75 l
311.0 365.5 m
311.0 370.75 l
321.75 365.5 m
321.75 370.75 l
332.75 365.5 m
332.75 370.75 l
343.75 365.5 m
343.75 370.75 l
354.5 360.5 m
354.5 370.75 l
365.5 365.5 m
365.5 370.75 l
376.5 365.5 m
376.5 370.75 l
387.25 365.5 m
387.25 370.75 l
398.25 365.5 m
398.25 370.75 l
409.25 360.5 m
409.25 370.75 l
420.0 365.5 m
420.0 370.75 l
431.0 365.5 m
431.0 370.75 l
442.0 365.5 m
442.0 370.75 l
452.75 365.5 m
452.75 370.75 l
463.75 360.5 m
463.75 370.75 l
474.75 365.5 m
474.75 370.75 l
485.5 365.5 m
485.5 370.75 l
496.5 365.5 m
496.5 370.75 l
507.25 365.5 m
507.25 370.75 l
518.25 360.5 m
518.25 370.75 l
300.0 360.5 m
300.0 370.75 l
289.25 365.5 m
289.25 370.75 l
289.25 59.75 m
289.25 370.75 l
295.25 59.75 m
289.25 59.75 l
292.25 85.75 m
289.25 85.75 l
292.25 111.5 m
289.25 111.5 l
292.25 137.5 m
289.25 137.5 l
292.25 163.5 m
289.25 163.5 l
295.25 189.25 m
289.25 189.25 l
292.25 215.25 m
289.25 215.25 l
292.25 241.25 m
289.25 241.25 l
292.25 267.0 m
289.25 267.0 l
292.25 293.0 m
289.25 293.0 l
295.25 319.0 m
289.25 319.0 l
295.25 319.0 m
289.25 319.0 l
292.25 344.75 m
289.25 344.75 l
518.25 59.75 m
518.25 370.75 l
512.0 59.75 m
518.25 59.75 l
515.25 85.75 m
518.25 85.75 l
515.25 111.5 m
518.25 111.5 l
515.25 137.5 m
518.25 137.5 l
515.25 163.5 m
518.25 163.5 l
512.0 189.25 m
518.25 189.25 l
515.25 215.25 m
518.25 215.25 l
515.25 241.25 m
518.25 241.25 l
515.25 267.0 m
518.25 267.0 l
515.25 293.0 m
518.25 293.0 l
512.0 319.0 m
518.25 319.0 l
512.0 319.0 m
518.25 319.0 l
515.25 344.75 m
518.25 344.75 l
S
n
466.75 247.25 m
466.75 250.75 l
466.75 239.75 m
466.75 236.0 l
/E1 /ColorSpace findRes cs 1.0 0.0 0.0 sc
S
n
470.615021 243.479996 m
470.615021 245.619019 468.879028 247.355011 466.73999 247.355011 c
464.601013 247.355011 462.865021 245.619019 462.865021 243.479996 c
462.865021 241.341019 464.601013 239.605011 466.73999 239.605011 c
468.879028 239.605011 470.615021 241.341019 470.615021 243.479996 c
eofill
n
443.13501 259.259979 m
443.13501 261.399017 441.399017 263.13501 439.259979 263.13501 c
437.121033 263.13501 435.38501 261.399017 435.38501 259.259979 c
435.38501 257.121002 437.121033 255.38501 439.259979 255.38501 c
441.399017 255.38501 443.13501 257.121002 443.13501 259.259979 c
eofill
n
415.89502 256.259979 m
415.89502 258.399017 414.159027 260.13501 412.019989 260.13501 c
409.881012 260.13501 408.14502 258.399017 408.14502 256.259979 c
408.14502 254.121017 409.881012 252.38501 412.019989 252.38501 c
414.159027 252.38501 415.89502 254.121017 415.89502 256.259979 c
eofill
n
399.875031 249.0 m
399.875031 251.139008 398.139008 252.875015 396.0 252.875015 c
393.861023 252.875015 392.125031 251.139008 392.125031 249.0 c
392.125031 246.861008 393.861023 245.125015 396.0 245.125015 c
398.139008 245.125015 399.875031 246.861008 399.875031 249.0 c
eofill
n
388.89502 239.519989 m
388.89502 241.659012 387.159027 243.395004 385.019989 243.395004 c
382.881012 243.395004 381.14502 241.659012 381.14502 239.519989 c
381.14502 237.381012 382.881012 235.645004 385.019989 235.645004 c
387.159027 235.645004 388.89502 237.381012 388.89502 239.519989 c
eofill
n
377.615021 227.759995 m
377.615021 229.899017 375.879028 231.63501 373.73999 231.63501 c
371.601013 231.63501 369.865021 229.899017 369.865021 227.759995 c
369.865021 225.621017 371.601013 223.88501 373.73999 223.88501 c
375.879028 223.88501 377.615021 225.621017 377.615021 227.759995 c
eofill
n
366.63501 213.479996 m
366.63501 215.619003 364.899017 217.355011 362.759979 217.355011 c
360.621002 217.355011 358.88501 215.619003 358.88501 213.479996 c
358.88501 211.341003 360.621002 209.605011 362.759979 209.605011 c
364.899017 209.605011 366.63501 211.341003 366.63501 213.479996 c
eofill
n
356.13501 196.73999 m
356.13501 198.879013 354.399017 200.615005 352.259979 200.615005 c
350.121002 200.615005 348.38501 198.879013 348.38501 196.73999 c
348.38501 194.601013 350.121002 192.865005 352.259979 192.865005 c
354.399017 192.865005 356.13501 194.601013 356.13501 196.73999 c
eofill
n
348.63501 181.73999 m
348.63501 183.879013 346.899017 185.615005 344.759979 185.615005 c
342.621002 185.615005 340.88501 183.879013 340.88501 181.73999 c
340.88501 179.601013 342.621002 177.865005 344.759979 177.865005 c
346.899017 177.865005 348.63501 179.601013 348.63501 181.73999 c
eofill
n
343.115021 169.979996 m
343.115021 172.119003 341.379028 173.855011 339.23999 173.855011 c
337.101013 173.855011 335.365021 172.119003 335.365021 169.979996 c
335.365021 167.841003 337.101013 166.105011 339.23999 166.105011 c
341.379028 166.105011 343.115021 167.841003 343.115021 169.979996 c
eofill
n
337.89502 158.519989 m
337.89502 160.659012 336.159027 162.395004 334.019989 162.395004 c
331.881012 162.395004 330.14502 160.659012 330.14502 158.519989 c
330.14502 156.381012 331.881012 154.645004 334.019989 154.645004 c
336.159027 154.645004 337.89502 156.381012 337.89502 158.519989 c
eofill
n
332.375031 145.259995 m
332.375031 147.399002 330.639008 149.13501 328.5 149.13501 c
326.361023 149.13501 324.625031 147.399002 324.625031 145.259995 c
324.625031 143.121002 326.361023 141.38501 328.5 141.38501 c
330.639008 141.38501 332.375031 143.121002 332.375031 145.259995 c
eofill
n
327.095001 132.23999 m
327.095001 134.379013 325.359009 136.115005 323.220001 136.115005 c
321.081024 136.115005 319.345001 134.379013 319.345001 132.23999 c
319.345001 130.101013 321.081024 128.365005 323.220001 128.365005 c
325.359009 128.365005 327.095001 130.101013 327.095001 132.23999 c
eofill
n
321.875031 117.479996 m
321.875031 119.619003 320.139008 121.355003 318.0 121.355003 c
315.861023 121.355003 314.125 119.619003 314.125 117.479996 c
314.125 115.341003 315.861023 113.605003 318.0 113.605003 c
320.139008 113.605003 321.875031 115.341003 321.875031 117.479996 c
eofill
n
316.89502 103.019997 m
316.89502 105.159004 315.159027 106.895004 313.019989 106.895004 c
310.881012 106.895004 309.14502 105.159004 309.14502 103.019997 c
309.14502 100.881004 310.881012 99.145004 313.019989 99.145004 c
315.159027 99.145004 316.89502 100.881004 316.89502 103.019997 c
eofill
n
312.095001 89.519997 m
312.095001 91.659004 310.359009 93.395004 308.220001 93.395004 c
306.081024 93.395004 304.345001 91.659004 304.345001 89.519997 c
304.345001 87.381004 306.081024 85.645004 308.220001 85.645004 c
310.359009 85.645004 312.095001 87.381004 312.095001 89.519997 c
eofill
n
422.25 258.5 m
422.25 259.5 l
422.25 251.25 m
422.25 250.25 l
449.25 261.0 m
449.25 267.25 l
449.25 253.5 m
449.25 247.5 l
0.0 0.0 1.0 sc
S
n
449.25 261.125 m
445.375031 261.125 l
445.375031 253.375015 l
453.125031 253.375015 l
453.125031 261.125 l
eofill
n
422.25 258.875 m
418.375031 258.875 l
418.375031 251.125015 l
426.125031 251.125015 l
426.125031 258.875 l
eofill
n
395.75 248.375015 m
391.875031 248.375015 l
391.875031 240.625015 l
399.625031 240.625015 l
399.625031 248.375015 l
eofill
n
380.0 235.125015 m
376.125031 235.125015 l
376.125031 227.375015 l
383.875031 227.375015 l
383.875031 235.125015 l
eofill
n
369.5 230.625015 m
365.625031 230.625015 l
365.625031 222.875015 l
373.375031 222.875015 l
373.375031 230.625015 l
eofill
n
358.75 218.375015 m
354.875031 218.375015 l
354.875031 210.625015 l
362.625031 210.625015 l
362.625031 218.375015 l
eofill
n
348.25 201.375015 m
344.375031 201.375015 l
344.375031 193.625015 l
352.125031 193.625015 l
352.125031 201.375015 l
eofill
n
338.5 180.125015 m
334.625031 180.125015 l
334.625031 172.375015 l
342.375031 172.375015 l
342.375031 180.125015 l
eofill
n
331.5 163.875015 m
327.625031 163.875015 l
327.625031 156.125 l
335.375031 156.125 l
335.375031 163.875015 l
eofill
n
326.75 149.375 m
322.875031 149.375 l
322.875031 141.625 l
330.625031 141.625 l
330.625031 149.375 l
eofill
n
322.0 136.375 m
318.125 136.375 l
318.125 128.625 l
325.875031 128.625 l
325.875031 136.375 l
eofill
n
317.75 123.125008 m
313.875 123.125008 l
313.875 115.375008 l
321.625031 115.375008 l
321.625031 123.125008 l
eofill
n
313.5 108.875008 m
309.625 108.875008 l
309.625 101.125008 l
317.375 101.125008 l
317.375 108.875008 l
eofill
n
309.5 97.875008 m
305.625 97.875008 l
305.625 90.125008 l
313.375 90.125008 l
313.375 97.875008 l
eofill
n
305.5 73.25 m
305.5 81.5 l
305.5 68.5 m
305.5 60.25 l
312.0 89.75 m
312.0 92.0 l
312.0 85.25 m
312.0 83.0 l
320.0 123.0 m
320.0 124.0 l
320.0 118.5 m
320.0 117.5 l
329.0 148.0 m
329.0 148.75 l
329.0 143.5 m
329.0 142.75 l
338.5 175.75 m
338.5 176.75 l
338.5 171.25 m
338.5 170.25 l
348.5 198.0 m
348.5 199.25 l
348.5 193.25 m
348.5 192.0 l
358.75 213.25 m
358.75 215.25 l
358.75 208.5 m
358.75 206.5 l
369.25 229.75 m
369.25 233.0 l
369.25 225.25 m
369.25 222.25 l
379.5 236.75 m
379.5 241.25 l
379.5 232.25 m
379.5 227.75 l
394.25 245.0 m
394.25 250.25 l
394.25 240.5 m
394.25 235.25 l
414.75 253.5 m
414.75 262.5 l
414.75 248.75 m
414.75 239.5 l
435.5 241.0 m
435.5 259.5 l
435.5 236.25 m
435.5 217.75 l
457.75 257.5 m
457.75 285.0 l
457.75 253.0 m
457.75 225.5 l
486.25 259.0 m
486.25 283.75 l
486.25 254.25 m
486.25 229.5 l
0.34902 0.83137 0.32941 sc
S
n
481.625031 258.292023 m
490.875031 258.292023 l
483.392029 252.855011 l
486.25 261.652008 l
489.108032 252.855011 l
f
n
453.125031 256.792023 m
462.375031 256.792023 l
454.892029 251.355011 l
457.75 260.152008 l
460.608032 251.355011 l
f
n
430.875031 240.292007 m
440.125031 240.292007 l
432.642029 234.855011 l
435.5 243.652008 l
438.358032 234.855011 l
f
n
410.125031 252.542007 m
419.375031 252.542007 l
411.892029 247.105011 l
414.75 255.902008 l
417.608032 247.105011 l
f
n
389.625031 244.292007 m
398.875031 244.292007 l
391.392029 238.855011 l
394.25 247.652008 l
397.108032 238.855011 l
f
n
374.875031 236.042007 m
384.125031 236.042007 l
376.642029 230.605011 l
379.5 239.402008 l
382.358032 230.605011 l
f
n
364.625031 229.042007 m
373.875031 229.042007 l
366.392029 223.605011 l
369.25 232.402008 l
372.108032 223.605011 l
f
n
354.125031 212.542007 m
363.375031 212.542007 l
355.892029 207.105011 l
358.75 215.902008 l
361.608032 207.105011 l
f
n
343.875031 197.292007 m
353.125031 197.292007 l
345.642029 191.855011 l
348.5 200.652008 l
351.358002 191.855011 l
f
n
333.875031 175.042007 m
343.125031 175.042007 l
335.642029 169.605011 l
338.5 178.402008 l
341.358002 169.605011 l
f
n
324.375031 147.292007 m
333.625031 147.292007 l
326.142029 141.855011 l
329.0 150.652008 l
331.858002 141.855011 l
f
n
315.375 122.292007 m
324.625031 122.292007 l
317.142029 116.855003 l
320.0 125.652008 l
322.858002 116.855003 l
f
n
307.375 89.042007 m
316.625 89.042007 l
309.142029 83.605003 l
312.0 92.402008 l
314.858002 83.605003 l
f
n
300.875 72.542 m
310.125 72.542 l
302.642029 67.105003 l
305.5 75.902 l
308.358002 67.105003 l
f
n
382.625031 233.208008 m
385.708008 233.208008 l
385.708008 230.125015 l
388.792023 230.125015 l
388.792023 233.208008 l
391.875031 233.208008 l
391.875031 236.292007 l
388.792023 236.292007 l
388.792023 239.375015 l
385.708008 239.375015 l
385.708008 236.292007 l
382.625031 236.292007 l
h
365.375031 221.458008 m
368.458008 221.458008 l
368.458008 218.375015 l
371.542023 218.375015 l
371.542023 221.458008 l
374.625031 221.458008 l
374.625031 224.542007 l
371.542023 224.542007 l
371.542023 227.625015 l
368.458008 227.625015 l
368.458008 224.542007 l
365.375031 224.542007 l
h
348.375031 199.958008 m
351.458008 199.958008 l
351.458008 196.875015 l
354.542023 196.875015 l
354.542023 199.958008 l
357.625031 199.958008 l
357.625031 203.042007 l
354.542023 203.042007 l
354.542023 206.125015 l
351.458008 206.125015 l
351.458008 203.042007 l
348.375031 203.042007 l
h
338.125031 184.208008 m
341.208008 184.208008 l
341.208008 181.125015 l
344.292023 181.125015 l
344.292023 184.208008 l
347.375031 184.208008 l
347.375031 187.292007 l
344.292023 187.292007 l
344.292023 190.375015 l
341.208008 190.375015 l
341.208008 187.292007 l
338.125031 187.292007 l
h
331.625031 170.208008 m
334.708008 170.208008 l
334.708008 167.125015 l
337.792023 167.125015 l
337.792023 170.208008 l
340.875031 170.208008 l
340.875031 173.292007 l
337.792023 173.292007 l
337.792023 176.375015 l
334.708008 176.375015 l
334.708008 173.292007 l
331.625031 173.292007 l
h
325.375031 152.208008 m
328.458008 152.208008 l
328.458008 149.125 l
331.542023 149.125 l
331.542023 152.208008 l
334.625031 152.208008 l
334.625031 155.292007 l
331.542023 155.292007 l
331.542023 158.375 l
328.458008 158.375 l
328.458008 155.292007 l
325.375031 155.292007 l
h
319.125 136.958008 m
322.208008 136.958008 l
322.208008 133.875 l
325.292023 133.875 l
325.292023 136.958008 l
328.375031 136.958008 l
328.375031 140.042007 l
325.292023 140.042007 l
325.292023 143.125 l
322.208008 143.125 l
322.208008 140.042007 l
319.125 140.042007 l
h
313.625 117.458008 m
316.708008 117.458008 l
316.708008 114.375008 l
319.792023 114.375008 l
319.792023 117.458008 l
322.875031 117.458008 l
322.875031 120.542007 l
319.792023 120.542007 l
319.792023 123.625008 l
316.708008 123.625008 l
316.708008 120.542007 l
313.625 120.542007 l
h
309.875 103.458008 m
312.958008 103.458008 l
312.958008 100.375008 l
316.042023 100.375008 l
316.042023 103.458008 l
319.125 103.458008 l
319.125 106.542007 l
316.042023 106.542007 l
316.042023 109.625008 l
312.958008 109.625008 l
312.958008 106.542007 l
309.875 106.542007 l
h
307.375 94.708008 m
310.458008 94.708008 l
310.458008 91.625008 l
313.542023 91.625008 l
313.542023 94.708008 l
316.625 94.708008 l
316.625 97.792007 l
313.542023 97.792007 l
313.542023 100.875008 l
310.458008 100.875008 l
310.458008 97.792007 l
307.375 97.792007 l
h
304.875 86.458008 m
307.958008 86.458008 l
307.958008 83.375008 l
311.042023 83.375008 l
311.042023 86.458008 l
314.125 86.458008 l
314.125 89.542007 l
311.042023 89.542007 l
311.042023 92.625008 l
307.958008 92.625008 l
307.958008 89.542007 l
304.875 89.542007 l
h
302.875 78.708 m
305.958008 78.708 l
305.958008 75.625 l
309.042023 75.625 l
309.042023 78.708 l
312.125 78.708 l
312.125 81.792007 l
309.042023 81.792007 l
309.042023 84.875008 l
305.958008 84.875008 l
305.958008 81.792007 l
302.875 81.792007 l
h
1.0 0.0 1.0 sc
S
n
307.75 80.0 m
307.75 81.0 l
307.75 72.75 m
307.75 72.0 l
345.75 199.25 m
345.75 192.0 m
352.25 207.75 m
352.25 208.25 l
352.25 200.25 m
352.25 199.75 l
361.5 221.5 m
361.5 222.0 l
361.5 214.25 m
361.5 213.75 l
375.0 234.5 m
375.0 236.75 l
375.0 227.0 m
375.0 224.75 l
388.75 256.75 m
388.75 262.75 l
388.75 249.25 m
388.75 243.25 l
406.75 246.5 m
406.75 255.75 l
406.75 239.0 m
406.75 229.75 l
410.615021 242.759995 m
410.615021 244.899017 408.879028 246.63501 406.73999 246.63501 c
404.601013 246.63501 402.865021 244.899017 402.865021 242.759995 c
402.865021 240.621017 404.601013 238.88501 406.73999 238.88501 c
408.879028 238.88501 410.615021 240.621017 410.615021 242.759995 c
392.615021 253.019989 m
392.615021 255.159012 390.879028 256.89502 388.73999 256.89502 c
386.601013 256.89502 384.865021 255.159012 384.865021 253.019989 c
384.865021 250.881012 386.601013 249.145004 388.73999 249.145004 c
390.879028 249.145004 392.615021 250.881012 392.615021 253.019989 c
378.875031 230.759995 m
378.875031 232.899017 377.139008 234.63501 375.0 234.63501 c
372.861023 234.63501 371.125031 232.899017 371.125031 230.759995 c
371.125031 228.621017 372.861023 226.88501 375.0 226.88501 c
377.139008 226.88501 378.875031 228.621017 378.875031 230.759995 c
365.375031 217.73999 m
365.375031 219.879013 363.639008 221.615005 361.5 221.615005 c
359.361023 221.615005 357.625031 219.879013 357.625031 217.73999 c
357.625031 215.601013 359.361023 213.865005 361.5 213.865005 c
363.639008 213.865005 365.375031 215.601013 365.375031 217.73999 c
356.13501 204.0 m
356.13501 206.139008 354.399017 207.875015 352.259979 207.875015 c
350.121002 207.875015 348.38501 206.139008 348.38501 204.0 c
348.38501 201.861008 350.121002 200.125015 352.259979 200.125015 c
354.399017 200.125015 356.13501 201.861008 356.13501 204.0 c
349.655029 195.779999 m
349.655029 197.919006 347.919006 199.655014 345.779999 199.655014 c
343.641022 199.655014 341.905029 197.919006 341.905029 195.779999 c
341.905029 193.641006 343.641022 191.905014 345.779999 191.905014 c
347.919006 191.905014 349.655029 193.641006 349.655029 195.779999 c
343.355011 182.759995 m
343.355011 184.899002 341.619019 186.63501 339.47998 186.63501 c
337.341003 186.63501 335.605011 184.899002 335.605011 182.759995 c
335.605011 180.621002 337.341003 178.88501 339.47998 178.88501 c
341.619019 178.88501 343.355011 180.621002 343.355011 182.759995 c
337.115021 162.479996 m
337.115021 164.619003 335.379028 166.355011 333.23999 166.355011 c
331.101013 166.355011 329.365021 164.619003 329.365021 162.479996 c
329.365021 160.341003 331.101013 158.605011 333.23999 158.605011 c
335.379028 158.605011 337.115021 160.341003 337.115021 162.479996 c
331.355011 148.5 m
331.355011 150.639008 329.619019 152.375 327.47998 152.375 c
325.341003 152.375 323.605011 150.639008 323.605011 148.5 c
323.605011 146.361008 325.341003 144.625 327.47998 144.625 c
329.619019 144.625 331.355011 146.361008 331.355011 148.5 c
325.655029 127.259995 m
325.655029 129.399002 323.919006 131.13501 321.779999 131.13501 c
319.641022 131.13501 317.905029 129.399002 317.905029 127.259995 c
317.905029 125.121002 319.641022 123.385002 321.779999 123.385002 c
323.919006 123.385002 325.655029 125.121002 325.655029 127.259995 c
320.375 110.759995 m
320.375 112.899002 318.639008 114.635002 316.5 114.635002 c
314.361023 114.635002 312.625 112.899002 312.625 110.759995 c
312.625 108.621002 314.361023 106.885002 316.5 106.885002 c
318.639008 106.885002 320.375 108.621002 320.375 110.759995 c
315.63501 86.519997 m
315.63501 88.659004 313.899017 90.395004 311.759979 90.395004 c
309.621002 90.395004 307.88501 88.659004 307.88501 86.519997 c
307.88501 84.381004 309.621002 82.645004 311.759979 82.645004 c
313.899017 82.645004 315.63501 84.381004 315.63501 86.519997 c
311.615021 76.5 m
311.615021 78.639 309.879028 80.375008 307.73999 80.375008 c
305.601013 80.375008 303.865021 78.639 303.865021 76.5 c
303.865021 74.361 305.601013 72.625 307.73999 72.625 c
309.879028 72.625 311.615021 74.361 311.615021 76.5 c
[/DeviceGray] cs 0.0 sc
S
n
310.25 95.0 m
310.25 119.75 l
310.25 87.5 m
310.25 62.5 l
318.25 108.75 m
318.25 122.75 l
318.25 101.5 m
318.25 87.5 l
326.0 154.0 m
326.0 163.25 l
326.0 146.75 m
326.0 137.5 l
336.25 175.25 m
336.25 182.75 l
336.25 168.0 m
336.25 160.5 l
348.5 201.25 m
348.5 211.25 l
348.5 193.75 m
348.5 183.75 l
363.0 227.0 m
363.0 240.0 l
363.0 219.75 m
363.0 206.75 l
381.25 243.75 m
381.25 262.25 l
381.25 236.25 m
381.25 217.75 l
381.25 243.875015 m
377.375031 243.875015 l
377.375031 236.125015 l
385.125031 236.125015 l
385.125031 243.875015 l
h
363.0 227.375015 m
359.125031 227.375015 l
359.125031 219.625015 l
366.875031 219.625015 l
366.875031 227.375015 l
h
348.5 201.375015 m
344.625031 201.375015 l
344.625031 193.625015 l
352.375031 193.625015 l
352.375031 201.375015 l
h
336.25 175.625015 m
332.375031 175.625015 l
332.375031 167.875015 l
340.125031 167.875015 l
340.125031 175.625015 l
h
326.0 154.125 m
322.125031 154.125 l
322.125031 146.375 l
329.875031 146.375 l
329.875031 154.125 l
h
318.25 108.875008 m
314.375 108.875008 l
314.375 101.125008 l
322.125031 101.125008 l
322.125031 108.875008 l
h
310.25 95.125008 m
306.375 95.125008 l
306.375 87.375008 l
314.125 87.375008 l
314.125 95.125008 l
h
/E1 /ColorSpace findRes cs 0.52941 0.4 0.34118 sc
S
[/DeviceGray] cs 0.0 sc
490.5 345.25 m
/N11 15.673904 Tf
(\(b\))
[5.219294 9.576637 5.219294 ] pdfxs
n
161.5 297.0 243.75 61.0 re
/E1 /ColorSpace findRes cs 1.0 1.0 1.0 sc
f
n
164.0 297.5 239.0 59.75 re
f
n
169.5 297.5 m
169.5 297.0 l
405.25 297.0 l
405.25 351.75 l
403.0 351.75 l
403.0 297.5 l
[/DeviceGray] cs 0.0 sc
eofill
n
164.0 297.5 m
403.0 297.5 -239.0 59.75 re
164.0 297.5 m
h
S
n
177.509995 345.23999 m
177.509995 347.309998 175.830002 348.98999 173.759995 348.98999 c
171.690002 348.98999 170.009995 347.309998 170.009995 345.23999 c
170.009995 343.169983 171.690002 341.48999 173.759995 341.48999 c
175.830002 341.48999 177.509995 343.169983 177.509995 345.23999 c
/E1 /ColorSpace findRes cs 1.0 0.0 0.0 sc
eofill
[/DeviceGray] cs 0.0 sc
215.25 340.5 m
/N11 13.867798 Tf
( \(PHENIX\))
[3.855246 4.617873 9.249925 10.012551 9.249925 10.012551 3.855246 9.249925 4.617873 ] pdfxs
211.75 345.25 m
/N11 9.245193 Tf
(-) show
%ADOBeginSubsetFont: GBIIGG+Symbol Initial
ct_CffDict begin
%ADOt1write: (1.0.21)
13 dict dup begin
/FontType 1 def
/FontName /GBIIGG+Symbol def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated. All rights reserved.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Symbol) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
def
/UniqueID 42996 def
/FontBBox {-180 -293 1090 1010} def
end
systemdict begin
dup /Private
9 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 0 673 688 487 500] def
/StdHW [92] def
/StdVW [85] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs [{ct_CffDict/F0Subr get exec} {ct_CffDict/F1Subr get exec}
{ct_CffDict/F2Subr get exec} {ct_CffDict/HSSubr get exec}] def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
1 dict dup begin
/.notdef <1C60D8A8C9B8707C25> |-
end put
end
dup /FontName get exch definefont pop
end
end
%ADOEndSubsetFont
[ 1 /pi/Lambda/Xi 32 /space 76 /Lambda 88 /Xi
 112 /pi
/N19/GBIIGG+Symbol -1 TZ
204.25 340.5 m
%ADOBeginSubsetFont: GBIIGG+Symbol AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.21)
systemdict begin
/GBIIGG+Symbol findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/pi <1C60D8A8C9B7967678F2ED2478535EB7B50DECCE78F28089B307456EDB9
089371383F74718798FCF22D6D686185B9074732F57B819259A4E99DD8D356BD
55E81236AB1C67A050E41981869DEEA9296AE9124988026D74E5E4B51B2F6905
7FA95946C8B081DF5096D1A21ACAE3DDF26EB12D2423765790F7377340145B5A
19A613EEE3DA5D67DE190CE253AC7061757FE656DCAC0FAC8E090EBE75E963E5
EADC51139339E48BC7859A965> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/GBIIGG+Symbol findfont /Encoding get
dup 1 /pi put
pop
end
%ADOEndSubsetFont
/N19 13.867798 Tf
(\001) show
196.000046 340.5 m
/N11 13.867798 Tf
(+) show
190.5 345.25 m
/N11 9.245193 Tf
(+) show
183.25 340.5 m
/N19 13.867798 Tf
(\001) show
n
173.75 331.5 m
170.0 331.5 l
170.0 324.0 l
177.5 324.0 l
177.5 331.5 l
/E1 /ColorSpace findRes cs 0.0 0.0 1.0 sc
eofill
[/DeviceGray] cs 0.0 sc
221.0 323.0 m
/N11 13.867798 Tf
( \(PHENIX\))
[3.855246 4.617873 9.249925 10.012551 9.249925 10.012551 3.855246 9.249925 4.617873 ] pdfxs
217.25 329.5 m
/N11 9.245193 Tf
(-) show
198.75 323.0 m
/N11 13.867798 Tf
(+K)
[8.098789 10.012551 ] pdfxs
193.25 329.5 m
/N11 9.245193 Tf
(+) show
183.25 323.0 m
/N11 13.867798 Tf
(K) show
n
169.125015 312.042023 m
178.375015 312.042023 l
170.892014 306.605011 l
173.75 315.402008 l
176.608002 306.605011 l
/E1 /ColorSpace findRes cs 0.34902 0.83137 0.32941 sc
f
[/DeviceGray] cs 0.0 sc
199.75 305.5 m
( \(STAR\))
[3.855246 4.617873 9.249925 8.47312 10.012551 10.012551 4.617873 ] pdfxs
193.25 301.0 m
/N11 9.245193 Tf
(S) show
193.25 311.999939 m
(0) show
183.25 305.5 m
/N11 13.867798 Tf
(K) show
n
295.875 343.708008 m
298.958008 343.708008 l
298.958008 340.625031 l
302.042023 340.625031 l
302.042023 343.708008 l
305.125 343.708008 l
305.125 346.792023 l
302.042023 346.792023 l
302.042023 349.875031 l
298.958008 349.875031 l
298.958008 346.792023 l
295.875 346.792023 l
h
/E1 /ColorSpace findRes cs 1.0 0.0 1.0 sc
S
[/DeviceGray] cs 0.0 sc
335.0 340.5 m
( \(PHENIX\))
[3.855246 4.617873 9.249925 10.012551 9.249925 10.012551 3.855246 9.249925 4.617873 ] pdfxs
326.750031 340.5 m
(p) show
1.5 w
n
326.75 352.5 m
335.0 352.5 l
S
310.25 340.5 m
(p+)
[8.47312 8.098789 ] pdfxs
0.75 w
n
304.22998 327.720001 m
304.22998 329.789978 302.549988 331.470001 300.47998 331.470001 c
298.410004 331.470001 296.72998 329.789978 296.72998 327.720001 c
296.72998 325.649994 298.410004 323.970001 300.47998 323.970001 c
302.549988 323.970001 304.22998 325.649994 304.22998 327.720001 c
S
338.75 323.0 m
( \(STAR\))
[3.855246 4.617873 9.249925 8.47312 10.012551 10.012551 4.617873 ] pdfxs
328.500305 323.0 m
%ADOBeginSubsetFont: GBIIGG+Symbol AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.21)
systemdict begin
/GBIIGG+Symbol findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Lambda <1C60D8A8C9B6232B6469BF27D9CCAFEF545D3936A4FAA7DEB8CF16F
9B3491CA514A441E8391632ABBAC8286BE872454C808A946F89755D20547DAD5
335BFCF90DA3C5423FD226DFF404CF16E6B7916CDC9DA89CA7757F8AD> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/GBIIGG+Symbol findfont /Encoding get
dup 2 /Lambda put
pop
end
%ADOEndSubsetFont
/N19 13.867798 Tf
(\002) show
1.5 w
n
328.5 335.0 m
338.75 335.0 l
S
320.25 323.0 m
/N11 13.867798 Tf
(+) show
310.249939 323.0 m
/N19 13.867798 Tf
(\002) show
0.75 w
n
300.5 314.25 m
296.75 314.25 l
296.75 306.75 l
304.25 306.75 l
304.25 314.25 l
h
/E1 /ColorSpace findRes cs 0.52941 0.4 0.34118 sc
S
[/DeviceGray] cs 0.0 sc
346.0 305.5 m
/N11 13.867798 Tf
( \(STAR\))
[3.855246 4.617873 9.249925 8.47312 10.012551 10.012551 4.617873 ] pdfxs
340.5 314.75 m
/N11 9.245193 Tf
(+) show
331.25 305.5 m
%ADOBeginSubsetFont: GBIIGG+Symbol AddGlyphs
ct_CffDict begin
%ADOt1write: (1.0.21)
systemdict begin
/GBIIGG+Symbol findfont dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/Xi <1C60D8A8C9B678BD651200656B12FB76E9583F472D4D12BD3DB8742EFEF
FC9AAF14A5ACEE9FF7C8AD1D52660F92DD9BECB72733750BFBBDB95B2BA0B189
9187C66B766760F39DF92726612C662FB3D7E272C97BE56771141EA1F7AA7C22
9BB3451809B60AEABD3C76959C61CA47B391B521085D7F1580C9F55F0305D6FE
AC8679DFF56CA65C90504EC1631919BE2C922A0A8FF4E8323950E5036EA4CAF4
BD15C8C465C8A1AD8295BDD5ADE64A33871DAAE> |-
systemdict /gcheck known {setglobal} if end {end} if
end
/GBIIGG+Symbol findfont /Encoding get
dup 3 /Xi put
pop
end
%ADOEndSubsetFont
/N19 13.867798 Tf
(\003) show
1.5 w
n
331.25 316.5 m
340.5 316.5 l
S
323.0 305.5 m
/N11 13.867798 Tf
(+) show
319.25 311.0 m
/N11 9.245193 Tf
(-) show
310.25 305.5 m
/N19 13.867798 Tf
(\003) show
n
/GBIIGG+Symbol /Font _pdfUndefineResource
/N19 /Font _pdfUndefineResource
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica-Bold
%%EOF
